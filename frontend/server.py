#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ GPTInfernse
"""

import os
import sys
from http.server import HTTPServer, SimpleHTTPRequestHandler
import socketserver
from urllib.parse import urlparse, parse_qs
import json
import requests
from pathlib import Path
import mimetypes

class GPTInfernseHandler(SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=str(Path(__file__).parent), **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if parsed_path.path == '/' or parsed_path.path == '':
            self.path = '/index.html'
            return super().do_GET()
        
        # API –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
        if parsed_path.path.startswith('/api/'):
            self.proxy_to_api('GET')
            return
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        return super().do_GET()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path.startswith('/api/'):
            self.proxy_to_api('POST')
        else:
            self.send_error(404, "Not Found")
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.send_header('Access-Control-Max-Age', '86400')
        self.end_headers()
    
    def proxy_to_api(self, method='GET'):
        """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API
            api_url = f"http://localhost:8000{self.path}"
            
            headers = {
                'Content-Type': 'application/json',
                'User-Agent': 'GPTInfernse-Frontend/1.0'
            }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
            data = None
            if method == 'POST':
                content_length = int(self.headers.get('Content-Length', 0))
                if content_length > 0:
                    data = self.rfile.read(content_length)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            if method == 'GET':
                response = requests.get(api_url, headers=headers, timeout=30)
            else:
                response = requests.post(api_url, data=data, headers=headers, timeout=30)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            self.send_response(response.status_code)
            self.send_header('Content-Type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Cache-Control', 'no-cache')
            self.end_headers()
            
            self.wfile.write(response.content)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
            print(f"{status_emoji} {method} {self.path} -> {response.status_code}")
            
        except requests.exceptions.ConnectionError:
            print(f"‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å API —Å–µ—Ä–≤–µ—Ä–æ–º: {api_url}")
            self.send_error(503, "API server unavailable")
        except requests.exceptions.Timeout:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {api_url}")
            self.send_error(504, "API server timeout")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è {method} {self.path}: {e}")
            self.send_error(500, f"Proxy error: {str(e)}")
    
    def end_headers(self):
        """–î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–∞–º"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        super().end_headers()
    
    def guess_type(self, path):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø —Ñ–∞–π–ª–∞"""
        mimetype, _ = mimetypes.guess_type(path)
        if mimetype is None:
            if path.endswith('.js'):
                return 'application/javascript'
            elif path.endswith('.css'):
                return 'text/css'
            elif path.endswith('.html'):
                return 'text/html; charset=utf-8'
            elif path.endswith('.json'):
                return 'application/json'
            else:
                return 'application/octet-stream'
        return mimetype
    
    def log_message(self, format, *args):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if not self.path.startswith('/api/'):
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-API –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            timestamp = self.log_date_time_string()
            print(f"üìÅ {timestamp} - {format % args}")

class ThreadedHTTPServer(socketserver.ThreadingMixIn, HTTPServer):
    """HTTP —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏"""
    daemon_threads = True
    allow_reuse_address = True

def run_server(port=3000, host='localhost'):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        try:
            response = requests.get(f"http://localhost:8000/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
        except:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:8000")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server_address = (host, port)
        httpd = ThreadedHTTPServer(server_address, GPTInfernseHandler)
        
        print(f"\nüöÄ GPTInfernse Frontend Server")
        print(f"üåê –ê–¥—Ä–µ—Å: http://{host}:{port}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path(__file__).parent}")
        print(f"üîó API Proxy: http://localhost:8000")
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
        print("-" * 50)
        
        httpd.serve_forever()
        
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except OSError as e:
        if e.errno == 48:  # Address already in use
            print(f"‚ùå –ü–æ—Ä—Ç {port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            print(f"   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç: python server.py {port + 1}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    port = 3000
    host = '0.0.0.0'
    
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞")
            sys.exit(1)
    
    if len(sys.argv) > 2:
        host = sys.argv[2]
    
    run_server(port, host)