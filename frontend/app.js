/**
 * GPTInfernse - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏—à–∫–∏ –¥–ª—è UI
 */

class GPTInfernseApp {
    constructor() {
        this.notifications = [];
        this.contextMenu = null;
        this.currentTheme = 'dark';
        this.shortcuts = new Map();
        
        this.init();
    }
    
    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPTInfernse App...');
        
        this.setupKeyboardShortcuts();
        this.setupContextMenu();
        this.setupNotifications();
        this.setupProgressBar();
        this.setupThemeToggle();
        this.setupMessageActions();
        
        console.log('‚úÖ GPTInfernse App –≥–æ—Ç–æ–≤!');
    }
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
    setupKeyboardShortcuts() {
        this.shortcuts.set('Escape', () => this.closeAllModals());
        this.shortcuts.set('ctrl+/', () => this.showShortcutsModal());
        this.shortcuts.set('ctrl+k', () => this.focusInput());
        this.shortcuts.set('ctrl+l', () => this.clearChat());
        this.shortcuts.set('ctrl+n', () => startNewChat());
        
        document.addEventListener('keydown', (e) => {
            const key = e.ctrlKey || e.metaKey ? 
                `ctrl+${e.key.toLowerCase()}` : 
                e.key;
            
            const handler = this.shortcuts.get(key);
            if (handler) {
                e.preventDefault();
                handler();
            }
        });
    }
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    setupContextMenu() {
        document.addEventListener('contextmenu', (e) => {
            if (e.target.closest('.message-content')) {
                e.preventDefault();
                this.showContextMenu(e, 'message');
            }
        });
        
        document.addEventListener('click', () => {
            this.hideContextMenu();
        });
    }
    
    showContextMenu(event, type) {
        this.hideContextMenu();
        
        const menu = document.createElement('div');
        menu.className = 'context-menu active';
        menu.style.left = event.pageX + 'px';
        menu.style.top = event.pageY + 'px';
        
        if (type === 'message') {
            menu.innerHTML = `
                <div class="context-menu-item" onclick="app.copyMessage(event)">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                    </svg>
                    –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </div>
                <div class="context-menu-item" onclick="app.selectMessage(event)">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M9 11H5a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h4m6-6h4a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2h-4m-6 0a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2h-4z"/>
                    </svg>
                    –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë
                </div>
                <div class="context-menu-separator"></div>
                <div class="context-menu-item" onclick="app.regenerateResponse(event)">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="23 4 23 10 17 10"/>
                        <polyline points="1 20 1 14 7 14"/>
                        <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
                    </svg>
                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç
                </div>
            `;
        }
        
        document.body.appendChild(menu);
        this.contextMenu = menu;
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –º–µ–Ω—é –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        const rect = menu.getBoundingClientRect();
        if (rect.right > window.innerWidth) {
            menu.style.left = (event.pageX - rect.width) + 'px';
        }
        if (rect.bottom > window.innerHeight) {
            menu.style.top = (event.pageY - rect.height) + 'px';
        }
    }
    
    hideContextMenu() {
        if (this.contextMenu) {
            this.contextMenu.remove();
            this.contextMenu = null;
        }
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    setupNotifications() {
        this.notificationContainer = document.createElement('div');
        this.notificationContainer.id = 'notifications';
        this.notificationContainer.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10001;
            pointer-events: none;
        `;
        document.body.appendChild(this.notificationContainer);
    }
    
    showNotification(message, type = 'info', duration = 5000) {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.style.pointerEvents = 'auto';
        
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };
        
        notification.innerHTML = `
            <div class="notification-header">
                <span class="notification-title">${icons[type]} ${this.getNotificationTitle(type)}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
            <div class="notification-message">${message}</div>
        `;
        
        this.notificationContainer.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => notification.classList.add('show'), 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, duration);
        }
        
        this.notifications.push(notification);
        return notification;
    }
    
    getNotificationTitle(type) {
        const titles = {
            success: '–£—Å–ø–µ—à–Ω–æ',
            error: '–û—à–∏–±–∫–∞',
            warning: '–í–Ω–∏–º–∞–Ω–∏–µ',
            info: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        };
        return titles[type] || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    setupProgressBar() {
        this.progressBar = document.createElement('div');
        this.progressBar.className = 'progress-bar';
        this.progressBar.innerHTML = '<div class="progress-fill"></div>';
        document.body.appendChild(this.progressBar);
    }
    
    showProgress() {
        this.progressBar.classList.add('active');
        const fill = this.progressBar.querySelector('.progress-fill');
        fill.style.width = '0%';
        
        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        let progress = 0;
        const interval = setInterval(() => {
            progress += Math.random() * 30;
            if (progress > 90) progress = 90;
            fill.style.width = progress + '%';
        }, 200);
        
        return () => {
            clearInterval(interval);
            fill.style.width = '100%';
            setTimeout(() => {
                this.progressBar.classList.remove('active');
            }, 300);
        };
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
    setupThemeToggle() {
        const toggle = document.createElement('button');
        toggle.className = 'theme-toggle tooltip';
        toggle.setAttribute('data-tooltip', '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É');
        toggle.innerHTML = 'üåô';
        toggle.onclick = () => this.toggleTheme();
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
        toggle.style.display = 'none';
        document.body.appendChild(toggle);
    }
    
    toggleTheme() {
        this.currentTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', this.currentTheme);
        
        const toggle = document.querySelector('.theme-toggle');
        toggle.innerHTML = this.currentTheme === 'dark' ? 'üåô' : '‚òÄÔ∏è';
        
        this.showNotification(
            `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${this.currentTheme === 'dark' ? '—Ç–µ–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'} —Ç–µ–º—É`,
            'success',
            2000
        );
    }
    
    // –î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    setupMessageActions() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        document.addEventListener('mouseover', (e) => {
            const message = e.target.closest('.message');
            if (message && !message.querySelector('.message-actions')) {
                this.addMessageActions(message);
            }
        });
    }
    
    addMessageActions(message) {
        const actions = document.createElement('div');
        actions.className = 'message-actions';
        
        if (message.classList.contains('ai-message')) {
            actions.innerHTML = `
                <button class="action-btn tooltip" data-tooltip="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" onclick="app.copyMessage(event)">
                    üìã
                </button>
                <button class="action-btn tooltip" data-tooltip="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" onclick="app.regenerateResponse(event)">
                    üîÑ
                </button>
                <button class="action-btn tooltip" data-tooltip="–õ–∞–π–∫" onclick="app.likeMessage(event)">
                    üëç
                </button>
            `;
        } else {
            actions.innerHTML = `
                <button class="action-btn tooltip" data-tooltip="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" onclick="app.copyMessage(event)">
                    üìã
                </button>
                <button class="action-btn tooltip" data-tooltip="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" onclick="app.editMessage(event)">
                    ‚úèÔ∏è
                </button>
            `;
        }
        
        message.appendChild(actions);
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    focusInput() {
        const input = document.getElementById('messageInput');
        if (input) {
            input.focus();
            this.showNotification('–§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞', 'info', 1000);
        }
    }
    
    clearChat() {
        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) {
            startNewChat();
            this.showNotification('–ß–∞—Ç –æ—á–∏—â–µ–Ω', 'success', 2000);
        }
    }
    
    closeAllModals() {
        document.querySelectorAll('.modal-overlay.active').forEach(modal => {
            modal.classList.remove('active');
        });
        this.hideContextMenu();
    }
    
    // –î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    copyMessage(event) {
        const message = event.target.closest('.message');
        const content = message.querySelector('.message-content').textContent;
        
        navigator.clipboard.writeText(content).then(() => {
            this.showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', 'success', 2000);
        }).catch(() => {
            this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'error', 2000);
        });
        
        this.hideContextMenu();
    }
    
    selectMessage(event) {
        const message = event.target.closest('.message');
        const content = message.querySelector('.message-content');
        
        const range = document.createRange();
        range.selectNodeContents(content);
        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
        
        this.hideContextMenu();
    }
    
    regenerateResponse(event) {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info', 2000);
        this.hideContextMenu();
    }
    
    likeMessage(event) {
        const button = event.target;
        button.innerHTML = button.innerHTML === 'üëç' ? '‚ù§Ô∏è' : 'üëç';
        this.showNotification('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!', 'success', 2000);
    }
    
    editMessage(event) {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info', 2000);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    showModal(title, content) {
        const overlay = document.createElement('div');
        overlay.className = 'modal-overlay';
        
        overlay.innerHTML = `
            <div class="modal">
                <div class="modal-header">
                    <div class="modal-title">${title}</div>
                    <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">√ó</button>
                </div>
                <div class="modal-content">${content}</div>
            </div>
        `;
        
        document.body.appendChild(overlay);
        setTimeout(() => overlay.classList.add('active'), 100);
        
        return overlay;
    }
    
    showShortcutsModal() {
        const shortcuts = `
            <div class="shortcuts-list">
                <div class="shortcut-item">
                    <kbd>Ctrl + K</kbd>
                    <span>–§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞</span>
                </div>
                <div class="shortcut-item">
                    <kbd>Ctrl + L</kbd>
                    <span>–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç</span>
                </div>
                <div class="shortcut-item">
                    <kbd>Ctrl + N</kbd>
                    <span>–ù–æ–≤—ã–π —á–∞—Ç</span>
                </div>
                <div class="shortcut-item">
                    <kbd>Ctrl + /</kbd>
                    <span>–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</span>
                </div>
                <div class="shortcut-item">
                    <kbd>Escape</kbd>
                    <span>–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞</span>
                </div>
                <div class="shortcut-item">
                    <kbd>Enter</kbd>
                    <span>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</span>
                </div>
                <div class="shortcut-item">
                    <kbd>Shift + Enter</kbd>
                    <span>–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞</span>
                </div>
            </div>
            <style>
                .shortcuts-list {
                    display: flex;
                    flex-direction: column;
                    gap: 12px;
                }
                .shortcut-item {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    padding: 8px 0;
                }
                kbd {
                    background: var(--bg-tertiary);
                    border: 1px solid var(--border);
                    border-radius: 4px;
                    padding: 4px 8px;
                    font-size: 12px;
                    font-family: monospace;
                }
            </style>
        `;
        
        this.showModal('–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏', shortcuts);
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    animateElement(element, animation, duration = 300) {
        element.style.animation = `${animation} ${duration}ms ease-out`;
        setTimeout(() => {
            element.style.animation = '';
        }, duration);
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
    async makeRequest(url, options = {}) {
        const hideProgress = this.showProgress();
        
        try {
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            hideProgress();
            return data;
            
        } catch (error) {
            hideProgress();
            this.showNotification(
                `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`,
                'error',
                5000
            );
            throw error;
        }
    }
    
    // –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    saveState() {
        const state = {
            theme: this.currentTheme,
            chatHistory: chatHistory || [],
            currentModel: currentModel || 'llama3'
        };
        
        localStorage.setItem('gptinfernse_state', JSON.stringify(state));
    }
    
    loadState() {
        try {
            const saved = localStorage.getItem('gptinfernse_state');
            if (saved) {
                const state = JSON.parse(saved);
                this.currentTheme = state.theme || 'dark';
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', error);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new GPTInfernseApp();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    window.addEventListener('beforeunload', () => {
        app.saveState();
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.GPTInfernseApp = GPTInfernseApp;
