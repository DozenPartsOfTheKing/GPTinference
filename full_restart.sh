#!/bin/bash

# üî• –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ GPTInfernse
# –£–±–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å –Ω—É–ª—è

echo "üî• –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê GPTInfernse"
echo "=================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
log_info() { echo "‚ÑπÔ∏è  $1"; }
log_success() { echo "‚úÖ $1"; }
log_error() { echo "‚ùå $1"; }
log_warning() { echo "‚ö†Ô∏è  $1"; }

# 1. –£–ë–ò–í–ê–ï–ú –í–°–ï –ü–†–û–¶–ï–°–°–´
echo ""
log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã..."

# –£–±–∏–≤–∞–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å—ã (API, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, –≤–æ—Ä–∫–µ—Ä—ã)
log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å—ã..."
pkill -f "uvicorn.*main:app" 2>/dev/null && log_success "API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" || log_warning "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
pkill -f "python.*server.py" 2>/dev/null && log_success "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" || log_warning "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
pkill -f "celery.*worker" 2>/dev/null && log_success "Celery worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" || log_warning "Celery worker –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
pkill -f "python.*main.py" 2>/dev/null && log_success "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö
log_info "–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã..."
for port in 8000 3000 6379 5555; do
    pid=$(lsof -ti:$port 2>/dev/null)
    if [ ! -z "$pid" ]; then
        kill -9 $pid 2>/dev/null && log_success "–ü–æ—Ä—Ç $port –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω" || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç $port"
    fi
done

# –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
sleep 3

# 2. –ü–†–û–í–ï–†–Ø–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ò
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
if command -v python3 &> /dev/null; then
    log_success "Python3 –Ω–∞–π–¥–µ–Ω: $(python3 --version)"
else
    log_error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if [[ "$VIRTUAL_ENV" != "" ]]; then
    log_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: $VIRTUAL_ENV"
else
    log_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ"
    if [ -f "venv/bin/activate" ]; then
        log_info "–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
        source venv/bin/activate
        log_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker (–¥–ª—è Ollama)
if command -v docker &> /dev/null; then
    log_success "Docker –Ω–∞–π–¥–µ–Ω"
else
    log_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ollama"
fi

# 3. –ó–ê–ü–£–°–ö–ê–ï–ú OLLAMA
echo ""
log_info "–ó–∞–ø—É—Å–∫–∞–µ–º Ollama..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama
if docker ps | grep -q ollama; then
    log_success "Ollama —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
else
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama..."
    if docker run -d -p 11434:11434 --name ollama ollama/ollama 2>/dev/null; then
        log_success "Ollama –∑–∞–ø—É—â–µ–Ω"
    else
        # –í–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if docker start ollama 2>/dev/null; then
            log_success "Ollama –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        else
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Ollama"
        fi
    fi
fi

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Ollama
log_info "–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Ollama..."
for i in {1..30}; do
    if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
        log_success "Ollama –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        break
    fi
    sleep 1
    echo -n "."
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏..."
models=$(curl -s http://localhost:11434/api/tags 2>/dev/null | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    if 'models' in data and data['models']:
        print(len(data['models']))
    else:
        print('0')
except:
    print('0')
" 2>/dev/null)

if [ "$models" -gt 0 ]; then
    log_success "–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: $models"
else
    log_warning "–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏..."
    docker exec ollama ollama pull llama3 &
    docker exec ollama ollama pull mistral &
    log_info "–ú–æ–¥–µ–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ..."
fi

# 4. –ó–ê–ü–£–°–ö–ê–ï–ú REDIS
echo ""
log_info "–ó–∞–ø—É—Å–∫–∞–µ–º Redis..."

if command -v redis-server &> /dev/null; then
    if ! pgrep redis-server > /dev/null; then
        redis-server --daemonize yes --port 6379 2>/dev/null && log_success "Redis –∑–∞–ø—É—â–µ–Ω" || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis"
    else
        log_success "Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
    fi
else
    log_warning "Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å"
fi

# 5. –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ò
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."

if [ -f "requirements.txt" ]; then
    log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    pip install -r requirements.txt --quiet && log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" || log_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
else
    log_warning "requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# 6. –ó–ê–ü–£–°–ö–ê–ï–ú API –°–ï–†–í–ï–†
echo ""
log_info "–ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä..."

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs

# –ó–∞–ø—É—Å–∫–∞–µ–º API –≤ —Ñ–æ–Ω–µ
nohup python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 > logs/api.log 2>&1 &
API_PID=$!

log_info "API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (PID: $API_PID)..."

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API
for i in {1..30}; do
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        log_success "API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤"
        break
    fi
    sleep 1
    echo -n "."
done

# 7. –ó–ê–ü–£–°–ö–ê–ï–ú CELERY WORKER
echo ""
log_info "–ó–∞–ø—É—Å–∫–∞–µ–º Celery worker..."

nohup celery -A app.workers.celery_app worker --loglevel=info > logs/worker.log 2>&1 &
WORKER_PID=$!

log_success "Celery worker –∑–∞–ø—É—â–µ–Ω (PID: $WORKER_PID)"

# 8. –ó–ê–ü–£–°–ö–ê–ï–ú –§–†–û–ù–¢–ï–ù–î
echo ""
log_info "–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
cd frontend

# –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
cat > temp_server.py << 'EOF'
#!/usr/bin/env python3
import http.server
import socketserver
import requests
import json
from urllib.parse import urlparse
import os

class GPTInfernseHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/' or self.path == '':
            self.path = '/index.html'
        elif self.path.startswith('/api/'):
            return self.proxy_to_api('GET')
        return super().do_GET()
    
    def do_POST(self):
        if self.path.startswith('/api/'):
            return self.proxy_to_api('POST')
        self.send_error(404)
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def proxy_to_api(self, method):
        try:
            api_url = f'http://localhost:8000{self.path}'
            headers = {'Content-Type': 'application/json'}
            
            data = None
            if method == 'POST':
                content_length = int(self.headers.get('Content-Length', 0))
                if content_length > 0:
                    data = self.rfile.read(content_length)
            
            if method == 'GET':
                response = requests.get(api_url, headers=headers, timeout=30)
            else:
                response = requests.post(api_url, data=data, headers=headers, timeout=30)
            
            self.send_response(response.status_code)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(response.content)
            
        except Exception as e:
            print(f"Proxy error: {e}")
            self.send_error(500, str(e))
    
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        super().end_headers()

if __name__ == "__main__":
    PORT = 3000
    with socketserver.TCPServer(("", PORT), GPTInfernseHandler) as httpd:
        print(f"üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
        httpd.serve_forever()
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
nohup python3 temp_server.py > ../logs/frontend.log 2>&1 &
FRONTEND_PID=$!

cd ..

log_success "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω (PID: $FRONTEND_PID)"

# 9. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
echo ""
log_info "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."

sleep 5

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
OLLAMA_OK=false
API_OK=false
FRONTEND_OK=false

# Ollama
if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
    OLLAMA_OK=true
    log_success "Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    log_error "Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# API
if curl -s http://localhost:8000/health > /dev/null 2>&1; then
    API_OK=true
    log_success "API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    log_error "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# Frontend
if curl -s http://localhost:3000 > /dev/null 2>&1; then
    FRONTEND_OK=true
    log_success "–§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    log_error "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# 10. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
echo ""
echo "üéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°"
echo "=================="

echo "–°–µ—Ä–≤–∏—Å—ã:"
echo "  $([ "$OLLAMA_OK" = true ] && echo "‚úÖ" || echo "‚ùå") Ollama (localhost:11434)"
echo "  $([ "$API_OK" = true ] && echo "‚úÖ" || echo "‚ùå") API Server (localhost:8000)"
echo "  $([ "$FRONTEND_OK" = true ] && echo "‚úÖ" || echo "‚ùå") Frontend (localhost:3000)"

echo ""
echo "PIDs –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:"
echo "  API: $API_PID"
echo "  Worker: $WORKER_PID"
echo "  Frontend: $FRONTEND_PID"

echo ""
echo "–õ–æ–≥–∏:"
echo "  üìÑ API: tail -f logs/api.log"
echo "  üìÑ Worker: tail -f logs/worker.log"
echo "  üìÑ Frontend: tail -f logs/frontend.log"

echo ""
if [ "$OLLAMA_OK" = true ] && [ "$API_OK" = true ] && [ "$FRONTEND_OK" = true ]; then
    echo "üéâ –í–°–ï –°–ï–†–í–ò–°–´ –ó–ê–ü–£–©–ï–ù–´ –£–°–ü–ï–®–ù–û!"
    echo ""
    echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"
    echo "  üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:3000"
    echo "  üìö API Docs: http://localhost:8000/docs"
    echo "  üè• Health: http://localhost:8000/health/detailed"
    echo ""
    echo "üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo "  kill $API_PID $WORKER_PID $FRONTEND_PID"
    echo "  docker stop ollama"
else
    echo "‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –°–ï–†–í–ò–°–´ –ù–ï –ó–ê–ü–£–°–¢–ò–õ–ò–°–¨"
    echo ""
    echo "üîç –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "  ./debug_logs.sh"
    echo "  tail -f logs/*.log"
fi

echo ""
echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
