#!/bin/bash

# GPTInfernse Local Runner (–±–µ–∑ Docker)
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_deps() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # Python venv
    if [ -z "$VIRTUAL_ENV" ]; then
        log_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!"
        log_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: source venv/bin/activate"
        exit 1
    fi
    
    # Redis
    if ! command -v redis-server &> /dev/null; then
        log_warning "Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
        sudo apt update && sudo apt install redis-server -y
    fi
    
    # Ollama
    if ! curl -s http://localhost:11434/api/tags > /dev/null; then
        log_error "Ollama –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:11434"
        log_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_env() {
    export DEBUG=true
    export LOG_LEVEL=INFO
    export API_HOST=0.0.0.0
    export API_PORT=8000
    export REDIS_HOST=localhost
    export REDIS_PORT=6379
    export OLLAMA_BASE_URL=http://localhost:11434
    export CELERY_BROKER_URL=redis://localhost:6379/0
    export CELERY_RESULT_BACKEND=redis://localhost:6379/0
    export SECRET_KEY=dev-secret-key-local
    
    log_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ Redis
start_redis() {
    log_info "–ó–∞–ø—É—Å–∫ Redis..."
    
    if pgrep redis-server > /dev/null; then
        log_success "Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
    else
        sudo service redis-server start
        sleep 2
        
        if redis-cli ping > /dev/null 2>&1; then
            log_success "Redis –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis"
            exit 1
        fi
    fi
}

# –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞
start_api() {
    log_info "–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    if lsof -i :8000 > /dev/null 2>&1; then
        log_warning "–ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å..."
        pkill -f "uvicorn.*app.main:app" || true
        sleep 2
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    nohup python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 > logs/api.log 2>&1 &
    API_PID=$!
    echo $API_PID > .api.pid
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞..."
    for i in {1..30}; do
        if curl -s http://localhost:8000/health > /dev/null; then
            log_success "API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $API_PID)"
            return 0
        fi
        sleep 1
    done
    
    log_error "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    return 1
}

# –ó–∞–ø—É—Å–∫ Celery worker
start_worker() {
    log_info "–ó–∞–ø—É—Å–∫ Celery worker..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ—Ä–∫–µ—Ä—ã
    pkill -f "celery.*worker" || true
    sleep 2
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    nohup celery -A app.utils.celery_app.celery_app worker --loglevel=info --concurrency=2 > logs/worker.log 2>&1 &
    WORKER_PID=$!
    echo $WORKER_PID > .worker.pid
    
    sleep 3
    log_success "Celery worker –∑–∞–ø—É—â–µ–Ω (PID: $WORKER_PID)"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API
    if [ -f .api.pid ]; then
        API_PID=$(cat .api.pid)
        kill $API_PID 2>/dev/null || true
        rm -f .api.pid
        log_info "API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Worker
    if [ -f .worker.pid ]; then
        WORKER_PID=$(cat .worker.pid)
        kill $WORKER_PID 2>/dev/null || true
        rm -f .worker.pid
        log_info "Celery worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    pkill -f "uvicorn.*app.main:app" || true
    pkill -f "celery.*worker" || true
    
    log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    log_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    
    # API
    if curl -s http://localhost:8000/health > /dev/null; then
        log_success "‚úÖ API —Å–µ—Ä–≤–µ—Ä: –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost:8000)"
    else
        log_error "‚ùå API —Å–µ—Ä–≤–µ—Ä: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # Redis
    if redis-cli ping > /dev/null 2>&1; then
        log_success "‚úÖ Redis: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "‚ùå Redis: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # Ollama
    if curl -s http://localhost:11434/api/tags > /dev/null; then
        log_success "‚úÖ Ollama: –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost:11434)"
    else
        log_error "‚ùå Ollama: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # Worker
    if pgrep -f "celery.*worker" > /dev/null; then
        log_success "‚úÖ Celery Worker: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "‚ùå Celery Worker: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test_system() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è
    if curl -s http://localhost:8000/health | grep -q "healthy"; then
        log_success "‚úÖ Health check –ø—Ä–æ—à–µ–ª"
    else
        log_error "‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª"
        return 1
    fi
    
    # –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
    if curl -s http://localhost:8000/models/ | grep -q "models"; then
        log_success "‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω"
    else
        log_error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"
        return 1
    fi
    
    # –¢–µ—Å—Ç —á–∞—Ç–∞
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞..."
    RESPONSE=$(curl -s -X POST http://localhost:8000/chat/sync \
        -H "Content-Type: application/json" \
        -d '{"prompt": "–ü—Ä–∏–≤–µ—Ç!", "model": "llama3"}')
    
    if echo "$RESPONSE" | grep -q "response"; then
        log_success "‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        echo "–û—Ç–≤–µ—Ç: $(echo "$RESPONSE" | jq -r '.response' 2>/dev/null || echo "$RESPONSE")"
    else
        log_error "‚ùå –ß–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "–û—Ç–≤–µ—Ç: $RESPONSE"
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-start}" in
    start)
        check_deps
        setup_env
        start_redis
        start_api
        start_worker
        sleep 3
        check_status
        log_success "üöÄ GPTInfernse –∑–∞–ø—É—â–µ–Ω!"
        log_info "API: http://localhost:8000/docs"
        log_info "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: $0 stop"
        ;;
    stop)
        stop_services
        ;;
    restart)
        stop_services
        sleep 2
        $0 start
        ;;
    status)
        check_status
        ;;
    test)
        test_system
        ;;
    logs)
        echo "=== API Logs ==="
        tail -n 20 logs/api.log 2>/dev/null || echo "–ù–µ—Ç –ª–æ–≥–æ–≤ API"
        echo ""
        echo "=== Worker Logs ==="
        tail -n 20 logs/worker.log 2>/dev/null || echo "–ù–µ—Ç –ª–æ–≥–æ–≤ Worker"
        ;;
    help)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo "  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo "  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  test     - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"
        echo "  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
        echo "  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        ;;
    *)
        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        $0 help
        exit 1
        ;;
esac
