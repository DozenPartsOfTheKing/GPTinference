#!/bin/bash

# üíÄ –£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã GPTInfernse

echo "üíÄ –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–°–ï –ü–†–û–¶–ï–°–°–´ GPTInfernse"
echo "========================================"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() { echo "‚ÑπÔ∏è  $1"; }
log_success() { echo "‚úÖ $1"; }
log_warning() { echo "‚ö†Ô∏è  $1"; }

# –£–±–∏–≤–∞–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å—ã
log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å—ã..."

processes_killed=0

# API —Å–µ—Ä–≤–µ—Ä (uvicorn)
if pkill -f "uvicorn.*main:app" 2>/dev/null; then
    log_success "API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    ((processes_killed++))
fi

# –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä
if pkill -f "python.*server.py" 2>/dev/null; then
    log_success "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    ((processes_killed++))
fi

# Celery worker
if pkill -f "celery.*worker" 2>/dev/null; then
    log_success "Celery worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    ((processes_killed++))
fi

# –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
if pkill -f "python.*main.py" 2>/dev/null; then
    log_success "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    ((processes_killed++))
fi

# –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
if pkill -f "temp_server.py" 2>/dev/null; then
    log_success "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    ((processes_killed++))
fi

# –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö
log_info "–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã..."

ports_freed=0

for port in 8000 3000 6379 5555; do
    pid=$(lsof -ti:$port 2>/dev/null)
    if [ ! -z "$pid" ]; then
        if kill -9 $pid 2>/dev/null; then
            log_success "–ü–æ—Ä—Ç $port –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω (PID: $pid)"
            ((ports_freed++))
        else
            log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç $port"
        fi
    fi
done

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."

containers_stopped=0

if docker ps | grep -q ollama; then
    if docker stop ollama 2>/dev/null; then
        log_success "Ollama –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ((containers_stopped++))
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ollama"
    fi
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
if pgrep redis-server > /dev/null; then
    if pkill redis-server 2>/dev/null; then
        log_success "Redis –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ((processes_killed++))
    fi
fi

# –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
log_info "–ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
sleep 3

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
log_info "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."

still_running=0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
for port in 8000 3000 11434; do
    if lsof -ti:$port > /dev/null 2>&1; then
        log_warning "–ü–æ—Ä—Ç $port –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç"
        ((still_running++))
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
if pgrep -f "uvicorn\|celery\|server.py" > /dev/null 2>&1; then
    log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç"
    ((still_running++))
fi

echo ""
echo "üìä –ò–¢–û–ì–ò:"
echo "  –ü—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $processes_killed"
echo "  –ü–æ—Ä—Ç–æ–≤ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: $ports_freed"
echo "  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $containers_stopped"

if [ $still_running -eq 0 ]; then
    log_success "–í–°–ï –ü–†–û–¶–ï–°–°–´ –£–°–ü–ï–®–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–´!"
else
    log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–≥—É—Ç –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—Ç—å"
    echo ""
    echo "üîç –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:"
    echo "  sudo lsof -ti:8000,3000,11434 | xargs kill -9"
    echo "  docker kill ollama"
fi

echo ""
echo "üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ:"
echo "  ./full_restart.sh"
