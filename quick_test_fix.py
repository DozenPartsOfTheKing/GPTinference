#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å database_manager
"""

import subprocess
import json
import time

def test_fix():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."""
    print("üõ†Ô∏è  –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø DATABASE_MANAGER")
    print("=" * 50)
    
    # 1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º API –∏ Worker
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    containers = ['gptinfernse-api', 'gptinfernse-worker']
    
    for container in containers:
        try:
            restart_cmd = ['docker', 'restart', container]
            result = subprocess.run(restart_cmd, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {container} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {container}: {result.stderr}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("‚è≥ –ñ–¥–µ–º 8 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")
    time.sleep(8)
    
    # 2. –û—Ç–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    print("\nüì§ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
    
    chat_request = {
        "prompt": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞–ø–æ–º–Ω–∏ –∫–æ–¥ 777",
        "model": "llama3.2",
        "conversation_id": "fix_test_conv",
        "stream": False
    }
    
    curl_cmd = [
        'curl', '-X', 'POST',
        'http://localhost:8000/chat/sync',
        '-H', 'Content-Type: application/json',
        '-H', 'X-User-ID: fix_test_user',
        '-d', json.dumps(chat_request),
        '--max-time', '30'
    ]
    
    try:
        result = subprocess.run(curl_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            try:
                response = json.loads(result.stdout)
                print(f"‚úÖ –ß–∞—Ç –æ—Ç–≤–µ—Ç–∏–ª: {response.get('response', 'N/A')[:50]}...")
                print(f"üìä –î–∏–∞–ª–æ–≥: {response.get('conversation_id', 'N/A')}")
            except:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç: {result.stdout}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {result.stderr}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö...")
    
    try:
        logs_cmd = ['docker', 'logs', '--tail', '20', 'gptinfernse-api']
        logs_result = subprocess.run(logs_cmd, capture_output=True, text=True)
        
        if logs_result.returncode == 0:
            logs = logs_result.stdout + logs_result.stderr
            
            # –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫
            error_lines = []
            for line in logs.split('\n'):
                if any(word in line.lower() for word in ['error', 'coroutine', 'runtimewarning']):
                    error_lines.append(line)
            
            if error_lines:
                print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:")
                for error in error_lines[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                    print(f"  {error}")
            else:
                print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î...")
    
    try:
        db_cmd = [
            'docker', 'exec', 'gptinfernse-postgres',
            'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
            '-c', '''
            SELECT 
                (SELECT COUNT(*) FROM users) as users,
                (SELECT COUNT(*) FROM conversations) as conversations,
                (SELECT COUNT(*) FROM messages) as messages;
            '''
        ]
        
        db_result = subprocess.run(db_cmd, capture_output=True, text=True)
        
        if db_result.returncode == 0:
            print("üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:")
            print(db_result.stdout)
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if "0" not in db_result.stdout or db_result.stdout.count("0") < 3:
                print("üéâ –î–ê–ù–ù–´–ï –ù–ê–ô–î–ï–ù–´ –í –ë–î!")
            else:
                print("‚ö†Ô∏è  –ë–î –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∏–º Redis
    print(f"\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    
    try:
        redis_cmd = ['docker', 'exec', 'gptinfernse-redis', 'redis-cli', 'keys', 'conversation:*']
        redis_result = subprocess.run(redis_cmd, capture_output=True, text=True)
        
        if redis_result.returncode == 0:
            keys = redis_result.stdout.strip().split('\n') if redis_result.stdout.strip() else []
            if keys and keys[0]:
                print(f"üéâ –ù–ê–ô–î–ï–ù–´ –ö–õ–Æ–ß–ò –î–ò–ê–õ–û–ì–û–í: {len(keys)}")
                for key in keys[:3]:
                    if key.strip():
                        print(f"  - {key}")
            else:
                print("‚ö†Ô∏è  –ö–ª—é—á–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    test_fix()
    
    print("\n" + "=" * 50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("–ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ 'coroutine' –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î - –ò–°–ü–†–ê–í–õ–ï–ù–û! ‚úÖ")
    print("–ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å - –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚ùå")

if __name__ == "__main__":
    main()
