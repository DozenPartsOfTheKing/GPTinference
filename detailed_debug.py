#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫
"""

import subprocess
import json
import re

def check_memory_errors_in_logs():
    """–ù–∞–π—Ç–∏ –æ—à–∏–±–∫–∏ –ø–∞–º—è—Ç–∏ –≤ –ª–æ–≥–∞—Ö."""
    print("üîç –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –ø–∞–º—è—Ç–∏ –≤ –ª–æ–≥–∞—Ö...")
    
    containers = ['gptinfernse-api', 'gptinfernse-worker']
    
    for container in containers:
        print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ {container}:")
        try:
            # –ü–æ–ª—É—á–∏–º –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            cmd = ['docker', 'logs', '--tail', '100', container]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                logs = result.stdout + result.stderr
                
                # –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –ø–∞–º—è—Ç–∏
                memory_errors = []
                database_errors = []
                redis_errors = []
                
                lines = logs.split('\n')
                for i, line in enumerate(lines):
                    line_lower = line.lower()
                    
                    # –û—à–∏–±–∫–∏ –ø–∞–º—è—Ç–∏
                    if any(keyword in line_lower for keyword in ['memory', 'conversation', 'save', 'failed to save']):
                        if any(error_word in line_lower for error_word in ['error', 'failed', 'exception', 'traceback']):
                            memory_errors.append(f"Line {i}: {line}")
                    
                    # –û—à–∏–±–∫–∏ –ë–î
                    if any(keyword in line_lower for keyword in ['database', 'postgresql', 'asyncpg', 'connection']):
                        if any(error_word in line_lower for error_word in ['error', 'failed', 'exception']):
                            database_errors.append(f"Line {i}: {line}")
                    
                    # –û—à–∏–±–∫–∏ Redis
                    if any(keyword in line_lower for keyword in ['redis', 'connection']):
                        if any(error_word in line_lower for error_word in ['error', 'failed', 'exception']):
                            redis_errors.append(f"Line {i}: {line}")
                
                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if memory_errors:
                    print("‚ùå –û—à–∏–±–∫–∏ –ø–∞–º—è—Ç–∏:")
                    for error in memory_errors[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                        print(f"  {error}")
                
                if database_errors:
                    print("‚ùå –û—à–∏–±–∫–∏ –ë–î:")
                    for error in database_errors[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                        print(f"  {error}")
                
                if redis_errors:
                    print("‚ùå –û—à–∏–±–∫–∏ Redis:")
                    for error in redis_errors[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                        print(f"  {error}")
                
                if not memory_errors and not database_errors and not redis_errors:
                    print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    # –ü–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–∞–º—è—Ç–∏
                    memory_logs = []
                    for i, line in enumerate(lines):
                        if any(keyword in line.lower() for keyword in ['memory', 'conversation', 'save']):
                            memory_logs.append(f"Line {i}: {line}")
                    
                    if memory_logs:
                        print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–∞–º—è—Ç–∏:")
                        for log in memory_logs[-3:]:
                            print(f"  {log}")
                
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤: {e}")

def test_api_endpoints():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API endpoints –ø–∞–º—è—Ç–∏."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    
    # –¢–µ—Å—Ç health check –ø–∞–º—è—Ç–∏
    try:
        cmd = ['curl', '-s', 'http://localhost:8000/memory/health']
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("üì° Memory health check:")
            try:
                health_data = json.loads(result.stdout)
                print(f"  Status: {health_data.get('status', 'unknown')}")
                print(f"  Redis: {health_data.get('redis_connected', 'unknown')}")
            except:
                print(f"  Raw response: {result.stdout}")
        else:
            print(f"‚ùå Health check failed: {result.stderr}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")

def check_database_schema():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª—å–Ω–æ."""
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ë–î...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        cmd = [
            'docker', 'exec', 'gptinfernse-postgres',
            'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
            '-c', """
            SELECT 
                schemaname,
                tablename,
                tableowner
            FROM pg_tables 
            WHERE schemaname = 'public'
            ORDER BY tablename;
            """
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("üìä –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            print(result.stdout)
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
            key_tables = ['users', 'conversations', 'messages']
            
            for table in key_tables:
                print(f"\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {table}:")
                struct_cmd = [
                    'docker', 'exec', 'gptinfernse-postgres',
                    'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
                    '-c', f'\\d {table}'
                ]
                
                struct_result = subprocess.run(struct_cmd, capture_output=True, text=True)
                if struct_result.returncode == 0:
                    print(struct_result.stdout)
                else:
                    print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã: {result.stderr}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    containers = ['gptinfernse-api', 'gptinfernse-worker']
    important_vars = ['DATABASE_URL', 'REDIS_URL', 'REDIS_HOST']
    
    for container in containers:
        print(f"\nüìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ {container}:")
        
        for var in important_vars:
            try:
                cmd = ['docker', 'exec', container, 'printenv', var]
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode == 0:
                    value = result.stdout.strip()
                    # –°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª–∏
                    if 'password' in value.lower():
                        value = re.sub(r':[^@]+@', ':***@', value)
                    print(f"  {var}: {value}")
                else:
                    print(f"  {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
                    
            except Exception as e:
                print(f"  {var}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üî¨ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ GPTInfernse")
    print("=" * 60)
    
    check_memory_errors_in_logs()
    test_api_endpoints()
    check_database_schema()
    check_environment_variables()
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø–∞–º—è—Ç–∏ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ fix_memory.py")
    print("2. –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î")
    print("3. –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ docker-compose.yml")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
