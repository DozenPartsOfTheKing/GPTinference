#!/bin/bash

# üéØ –ü–û–®–ê–ì–û–í–´–ô –ó–ê–ü–£–°–ö –° –¢–ï–°–¢–ê–ú–ò
# –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –æ—Ç–¥–µ–ª—å–Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π

echo "üéØ –ü–û–®–ê–ì–û–í–´–ô –ó–ê–ü–£–°–ö GPTInfernse"
echo "==============================="

cd ~/GPTinference

# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–û–í
test_ollama() {
    echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Ollama..."
    if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
        models=$(curl -s http://localhost:11434/api/tags | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(len(data.get('models', [])))
except:
    print('0')
" 2>/dev/null)
        echo "‚úÖ Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–¥–µ–ª–µ–π: $models"
        return 0
    else
        echo "‚ùå Ollama –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 1
    fi
}

test_api() {
    echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API..."
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        echo "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        # –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        health=$(curl -s http://localhost:8000/health/detailed 2>/dev/null)
        if echo "$health" | grep -q "healthy"; then
            echo "‚úÖ API –∑–¥–æ—Ä–æ–≤—å–µ OK"
            return 0
        else
            echo "‚ö†Ô∏è API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º"
            echo "$health"
            return 1
        fi
    else
        echo "‚ùå API –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 1
    fi
}

test_frontend() {
    echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Frontend..."
    if curl -s http://localhost:3000 > /dev/null 2>&1; then
        echo "‚úÖ Frontend –æ—Ç–≤–µ—á–∞–µ—Ç"
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è API
        if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "‚úÖ Frontend –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç API"
            return 0
        else
            echo "‚ö†Ô∏è Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ù–ï –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç API"
            return 1
        fi
    else
        echo "‚ùå Frontend –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 1
    fi
}

test_chat() {
    echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç..."
    response=$(curl -s -X POST http://localhost:8000/chat/sync \
        -H "Content-Type: application/json" \
        -d '{"prompt": "–ü—Ä–∏–≤–µ—Ç!", "model": "llama3", "max_tokens": 20}' 2>/dev/null)
    
    if echo "$response" | grep -q "response"; then
        echo "‚úÖ –ß–ê–¢ –†–ê–ë–û–¢–ê–ï–¢!"
        answer=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('response', 'No response')[:50])
except:
    print('Parse error')
" 2>/dev/null)
        echo "üìù –û—Ç–≤–µ—Ç: $answer..."
        return 0
    else
        echo "‚ùå –ß–ê–¢ –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        echo "üìù –û—à–∏–±–∫–∞: $response"
        return 1
    fi
}

# –≠–¢–ê–ü 1: OLLAMA
echo ""
echo "üöÄ –≠–¢–ê–ü 1: –ó–ê–ü–£–°–ö OLLAMA"
echo "========================"

echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã..."
docker stop ollama 2>/dev/null || echo "Ollama –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"

echo "üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º Ollama Docker..."
docker start ollama 2>/dev/null || docker run -d -p 11434:11434 --name ollama ollama/ollama

echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Ollama (30 —Å–µ–∫)..."
for i in {1..30}; do
    if test_ollama; then
        break
    fi
    sleep 1
    echo -n "."
done

echo ""
if ! test_ollama; then
    echo "‚ùå –≠–¢–ê–ü 1 –ü–†–û–í–ê–õ–ï–ù! Ollama –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
    docker ps | grep ollama
    docker logs ollama --tail 10
    exit 1
fi

echo "‚úÖ –≠–¢–ê–ü 1 –£–°–ü–ï–®–ï–ù!"

# –≠–¢–ê–ü 2: API
echo ""
echo "üöÄ –≠–¢–ê–ü 2: –ó–ê–ü–£–°–ö API"
echo "===================="

echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π API..."
pkill -f "uvicorn.*main:app" 2>/dev/null || echo "API –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä..."
mkdir -p logs
nohup python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 > logs/api.log 2>&1 &
API_PID=$!

echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API (20 —Å–µ–∫)..."
for i in {1..20}; do
    if test_api; then
        break
    fi
    sleep 1
    echo -n "."
done

echo ""
if ! test_api; then
    echo "‚ùå –≠–¢–ê–ü 2 –ü–†–û–í–ê–õ–ï–ù! API –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
    echo "PID: $API_PID"
    tail -10 logs/api.log
    exit 1
fi

echo "‚úÖ –≠–¢–ê–ü 2 –£–°–ü–ï–®–ï–ù!"

# –≠–¢–ê–ü 3: FRONTEND
echo ""
echo "üöÄ –≠–¢–ê–ü 3: –ó–ê–ü–£–°–ö FRONTEND"
echo "=========================="

echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π Frontend..."
pkill -f "python.*server" 2>/dev/null || echo "Frontend –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
lsof -ti:3000 | xargs kill -9 2>/dev/null || echo "–ü–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω"

echo "üåê –ó–∞–ø—É—Å–∫–∞–µ–º Frontend —Å –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º..."
cd frontend

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
cat > working_server.py << 'EOF'
#!/usr/bin/env python3
import http.server
import socketserver
import requests
import json

class WorkingHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/' or self.path == '':
            self.path = '/index.html'
        elif self.path.startswith('/api/'):
            return self.proxy_to_api('GET')
        return super().do_GET()
    
    def do_POST(self):
        if self.path.startswith('/api/'):
            return self.proxy_to_api('POST')
        self.send_error(404)
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def proxy_to_api(self, method):
        try:
            api_url = f'http://localhost:8000{self.path}'
            headers = {'Content-Type': 'application/json'}
            
            if method == 'GET':
                response = requests.get(api_url, headers=headers, timeout=30)
            else:
                content_length = int(self.headers.get('Content-Length', 0))
                data = self.rfile.read(content_length) if content_length > 0 else None
                response = requests.post(api_url, data=data, headers=headers, timeout=30)
            
            self.send_response(response.status_code)
            self.send_header('Content-Type', response.headers.get('Content-Type', 'application/json'))
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(response.content)
            
            print(f"‚úÖ Proxy: {method} {self.path} -> {response.status_code}")
            
        except Exception as e:
            print(f"‚ùå Proxy error: {e}")
            self.send_error(500, str(e))
    
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        super().end_headers()

PORT = 3000
print(f"üåê Frontend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
with socketserver.TCPServer(("", PORT), WorkingHandler) as httpd:
    httpd.serve_forever()
EOF

nohup python3 working_server.py > ../logs/frontend.log 2>&1 &
FRONTEND_PID=$!

cd ..

echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Frontend (10 —Å–µ–∫)..."
for i in {1..10}; do
    if test_frontend; then
        break
    fi
    sleep 1
    echo -n "."
done

echo ""
if ! test_frontend; then
    echo "‚ùå –≠–¢–ê–ü 3 –ü–†–û–í–ê–õ–ï–ù! Frontend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
    echo "PID: $FRONTEND_PID"
    tail -10 logs/frontend.log
    exit 1
fi

echo "‚úÖ –≠–¢–ê–ü 3 –£–°–ü–ï–®–ï–ù!"

# –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢
echo ""
echo "üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ß–ê–¢–ê"
echo "======================"

if test_chat; then
    echo ""
    echo "üéâ –í–°–ï –≠–¢–ê–ü–´ –£–°–ü–ï–®–ù–´!"
    echo "===================="
    echo ""
    echo "üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:3000"
    echo "üìö API Docs: http://localhost:8000/docs"
    echo "üè• Health: http://localhost:8000/health/detailed"
    echo ""
    echo "üìä –ü—Ä–æ—Ü–µ—Å—Å—ã:"
    echo "  API PID: $API_PID"
    echo "  Frontend PID: $FRONTEND_PID"
    echo ""
    echo "üìÑ –õ–æ–≥–∏:"
    echo "  tail -f logs/api.log"
    echo "  tail -f logs/frontend.log"
    echo ""
    echo "üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!"
else
    echo ""
    echo "‚ùå –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!"
    echo "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã, –Ω–æ —á–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo ""
    echo "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
    echo "  curl http://localhost:8000/models/"
    echo "  docker exec ollama ollama list"
fi
