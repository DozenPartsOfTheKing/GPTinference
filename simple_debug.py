#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import subprocess
import json
import sys

def check_containers():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    try:
        result = subprocess.run(['docker', 'ps', '--format', 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω")
            print("üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
            print(result.stdout)
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            containers = ['gptinfernse-postgres', 'gptinfernse-redis', 'gptinfernse-api', 'gptinfernse-worker']
            running_containers = result.stdout
            
            for container in containers:
                if container in running_containers:
                    print(f"‚úÖ {container} - –∑–∞–ø—É—â–µ–Ω")
                else:
                    print(f"‚ùå {container} - –ù–ï –∑–∞–ø—É—â–µ–Ω")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Docker: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
        return False

def check_postgres_simple():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL —á–µ—Ä–µ–∑ docker exec."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        cmd = [
            'docker', 'exec', 'gptinfernse-postgres', 
            'psql', '-U', 'gptinfernse', '-d', 'gptinfernse', 
            '-c', 'SELECT COUNT(*) as users FROM users;'
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:")
            print(result.stdout)
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL: {e}")
        return False

def check_redis_simple():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis —á–µ—Ä–µ–∑ docker exec."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        cmd = ['docker', 'exec', 'gptinfernse-redis', 'redis-cli', 'ping']
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0 and 'PONG' in result.stdout:
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–ª—é—á–∏ –ø–∞–º—è—Ç–∏
            keys_cmd = ['docker', 'exec', 'gptinfernse-redis', 'redis-cli', 'keys', '*']
            keys_result = subprocess.run(keys_cmd, capture_output=True, text=True)
            
            if keys_result.returncode == 0:
                keys = keys_result.stdout.strip().split('\n') if keys_result.stdout.strip() else []
                print(f"üîë –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π –≤ Redis: {len(keys)}")
                
                # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–π
                if keys and keys[0]:  # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
                    print("üìã –ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–π:")
                    for key in keys[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–π
                        if key.strip():
                            print(f"  - {key}")
                else:
                    print("‚ö†Ô∏è  –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø–∞–º—è—Ç—å –ø—É—Å—Ç–∞!")
                    
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis: {e}")
        return False

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
    
    containers = ['gptinfernse-api', 'gptinfernse-worker']
    
    for container in containers:
        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ {container}:")
        try:
            cmd = ['docker', 'logs', '--tail', '10', container]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(result.stdout[-500:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                if result.stderr:
                    print("STDERR:", result.stderr[-200:])
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üöÄ –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GPTInfernse")
    print("=" * 50)
    
    containers_ok = check_containers()
    
    if containers_ok:
        postgres_ok = check_postgres_simple()
        redis_ok = check_redis_simple()
        check_logs()
        
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print(f"  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {'‚úÖ OK' if containers_ok else '‚ùå FAIL'}")
        print(f"  PostgreSQL: {'‚úÖ OK' if postgres_ok else '‚ùå FAIL'}")
        print(f"  Redis: {'‚úÖ OK' if redis_ok else '‚ùå FAIL'}")
        
        if not postgres_ok or not redis_ok:
            print("\n‚ö†Ô∏è  –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            if not postgres_ok:
                print("  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            if not redis_ok:
                print("  - Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–∞–º—è—Ç—å –ø—É—Å—Ç–∞")
                print("  - –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")
    else:
        print("\n‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./start")

if __name__ == "__main__":
    main()
