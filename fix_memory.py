#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é GPTInfernse
"""

import subprocess
import sys

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —Ç–∞–±–ª–∏—Ü—ã
        cmd = [
            'docker', 'exec', 'gptinfernse-postgres', 
            'psql', '-U', 'gptinfernse', '-d', 'gptinfernse', 
            '-c', "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';"
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            tables = result.stdout
            print("üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
            print(tables)
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            required_tables = ['users', 'conversations', 'messages', 'system_memory']
            missing_tables = []
            
            for table in required_tables:
                if table not in tables:
                    missing_tables.append(table)
            
            if missing_tables:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                
                # –ü—Ä–∏–º–µ–Ω–∏–º —Å—Ö–µ–º—É
                schema_cmd = [
                    'docker', 'exec', '-i', 'gptinfernse-postgres',
                    'psql', '-U', 'gptinfernse', '-d', 'gptinfernse'
                ]
                
                with open('database/schema.sql', 'r') as f:
                    schema_sql = f.read()
                
                schema_result = subprocess.run(schema_cmd, input=schema_sql, text=True, capture_output=True)
                
                if schema_result.returncode == 0:
                    print("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã: {schema_result.stderr}")
                    return False
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def test_memory_save():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ API."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –ø–∞–º—è—Ç–∏
        import json
        
        test_message = {
            "id": "test_msg_123",
            "role": "user", 
            "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏",
            "tokens": 10
        }
        
        curl_cmd = [
            'curl', '-X', 'POST',
            'http://localhost:8000/memory/conversation/test_conv_123/message',
            '-H', 'Content-Type: application/json',
            '-H', 'X-User-ID: test_user',
            '-d', json.dumps(test_message)
        ]
        
        result = subprocess.run(curl_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("üì§ API –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:")
            print(result.stdout)
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            check_cmd = [
                'docker', 'exec', 'gptinfernse-postgres',
                'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
                '-c', 'SELECT COUNT(*) FROM messages;'
            ]
            
            check_result = subprocess.run(check_cmd, capture_output=True, text=True)
            
            if check_result.returncode == 0:
                print("üìä –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:")
                print(check_result.stdout)
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def check_worker_logs():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ worker'–∞."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ worker'–∞...")
    
    try:
        cmd = ['docker', 'logs', '--tail', '50', 'gptinfernse-worker']
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("üìã –õ–æ–≥–∏ worker'–∞:")
            print(result.stdout)
            if result.stderr:
                print("STDERR:")
                print(result.stderr)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {result.stderr}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def restart_services():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º worker –∏ api
        services = ['gptinfernse-worker', 'gptinfernse-api']
        
        for service in services:
            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {service}...")
            restart_cmd = ['docker', 'restart', service]
            result = subprocess.run(restart_cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ {service} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {service}: {result.stderr}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    print("üõ†Ô∏è  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é GPTInfernse")
    print("=" * 60)
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    db_ok = init_database()
    
    if db_ok:
        # 2. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        restart_ok = restart_services()
        
        if restart_ok:
            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            test_ok = test_memory_save()
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
            check_worker_logs()
            
            print("\n" + "=" * 60)
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
            print(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ OK' if db_ok else '‚ùå FAIL'}")
            print(f"  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: {'‚úÖ OK' if restart_ok else '‚ùå FAIL'}")
            print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ OK' if test_ok else '‚ùå FAIL'}")
            
            if all([db_ok, restart_ok, test_ok]):
                print("\nüéâ –ü—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü–∞–º—è—Ç—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å.")
            else:
                print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()
