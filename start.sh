#!/bin/bash

# üöÄ GPTInfernse - –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
warning() { echo -e "${YELLOW}[!]${NC} $1"; }
error() { echo -e "${RED}[‚úó]${NC} $1"; }
header() { echo -e "${PURPLE}=== $1 ===${NC}"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
    sudo apt update -qq
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis
    if ! command -v redis-server &> /dev/null; then
        log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis..."
        sudo apt install -y redis-server
        success "Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        success "Redis —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ jq –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
    if ! command -v jq &> /dev/null; then
        log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ jq..."
        sudo apt install -y jq
        success "jq —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        success "jq —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python venv
    if [ -z "$VIRTUAL_ENV" ]; then
        if [ -d "venv" ]; then
            log "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            source venv/bin/activate
            success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
        else
            log "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            python3 -m venv venv
            source venv/bin/activate
            success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
        fi
    else
        success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ"
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    pip install -q -r requirements.txt
    success "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
check_ollama() {
    header "–ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama"
    
    if curl -s http://localhost:11434/api/tags > /dev/null; then
        success "Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ localhost:11434"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
        MODELS=$(curl -s http://localhost:11434/api/tags | jq -r '.models[].name' 2>/dev/null || echo "")
        if [ -n "$MODELS" ]; then
            success "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"
            echo "$MODELS" | while read model; do
                echo "  - $model"
            done
        else
            warning "–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å: ollama pull llama3"
        fi
    else
        error "Ollama –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:11434"
        log "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama: ollama serve"
        log "–ò —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å: ollama pull llama3"
        exit 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f ".env" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
        cp config.env.example .env
        success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    else
        success ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p logs
    mkdir -p data
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    export DEBUG=true
    export LOG_LEVEL=INFO
    export API_HOST=0.0.0.0
    export API_PORT=8000
    export REDIS_HOST=localhost
    export REDIS_PORT=6379
    export OLLAMA_BASE_URL=http://localhost:11434
    export CELERY_BROKER_URL=redis://localhost:6379/0
    export CELERY_RESULT_BACKEND=redis://localhost:6379/0
    export SECRET_KEY=dev-secret-key-$(date +%s)
    
    success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ Redis
start_redis() {
    header "–ó–∞–ø—É—Å–∫ Redis"
    
    if pgrep redis-server > /dev/null; then
        success "Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
    else
        log "–ó–∞–ø—É—Å–∫ Redis —Å–µ—Ä–≤–µ—Ä–∞..."
        sudo service redis-server start
        sleep 2
        
        if redis-cli ping > /dev/null 2>&1; then
            success "Redis —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        else
            error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis"
            exit 1
        fi
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
stop_existing() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API
    pkill -f "uvicorn.*app.main:app" 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Worker
    pkill -f "celery.*worker" 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ PID —Ñ–∞–π–ª–æ–≤
    rm -f .api.pid .worker.pid
    
    sleep 2
    success "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞
start_api() {
    header "–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"
    
    log "–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8000..."
    nohup python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 > logs/api.log 2>&1 &
    API_PID=$!
    echo $API_PID > .api.pid
    
    log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞..."
    for i in {1..30}; do
        if curl -s http://localhost:8000/health > /dev/null 2>&1; then
            success "API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $API_PID)"
            success "–î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000"
            return 0
        fi
        sleep 1
        echo -n "."
    done
    
    error "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
    cat logs/api.log
    exit 1
}

# –ó–∞–ø—É—Å–∫ Celery Worker
start_worker() {
    header "–ó–∞–ø—É—Å–∫ Celery Worker"
    
    log "–ó–∞–ø—É—Å–∫ Celery worker..."
    nohup celery -A app.utils.celery_app.celery_app worker --loglevel=info --concurrency=2 > logs/worker.log 2>&1 &
    WORKER_PID=$!
    echo $WORKER_PID > .worker.pid
    
    sleep 3
    success "Celery worker –∑–∞–ø—É—â–µ–Ω (PID: $WORKER_PID)"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
test_system() {
    header "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    
    # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API..."
    if HEALTH=$(curl -s http://localhost:8000/health/detailed); then
        if echo "$HEALTH" | jq -e '.status == "healthy"' > /dev/null 2>&1; then
            success "‚úÖ API –∑–¥–æ—Ä–æ–≤"
        else
            warning "‚ö†Ô∏è  API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"
        fi
    else
        error "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π..."
    if MODELS=$(curl -s http://localhost:8000/models/); then
        MODEL_COUNT=$(echo "$MODELS" | jq -r '.models | length' 2>/dev/null || echo "0")
        if [ "$MODEL_COUNT" -gt 0 ]; then
            success "‚úÖ –ù–∞–π–¥–µ–Ω–æ $MODEL_COUNT –º–æ–¥–µ–ª–µ–π"
        else
            warning "‚ö†Ô∏è  –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"
    fi
    
    # –¢–µ—Å—Ç —á–∞—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞..."
    CHAT_RESPONSE=$(curl -s -X POST http://localhost:8000/chat/sync \
        -H "Content-Type: application/json" \
        -d '{"prompt": "–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ.", "model": "llama3", "max_tokens": 10}' 2>/dev/null)
    
    if echo "$CHAT_RESPONSE" | jq -e '.response' > /dev/null 2>&1; then
        RESPONSE_TEXT=$(echo "$CHAT_RESPONSE" | jq -r '.response')
        success "‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: \"$RESPONSE_TEXT\""
    else
        warning "‚ö†Ô∏è  –ß–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        echo "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $CHAT_RESPONSE"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
show_info() {
    header "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
    
    echo -e "${CYAN}üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:${NC}"
    echo "  üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs"
    echo "  üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:  http://localhost:8000/health/detailed"
    echo "  ü§ñ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π:    http://localhost:8000/models/"
    
    echo -e "\n${CYAN}üíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CLI:${NC}"
    echo "  python client_example.py interactive    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç"
    echo "  python client_example.py health         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
    echo "  python client_example.py models         # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"
    echo "  python client_example.py chat \"–ü—Ä–∏–≤–µ—Ç!\" # –ë—ã—Å—Ç—Ä—ã–π —á–∞—Ç"
    
    echo -e "\n${CYAN}üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${NC}"
    echo "  ./start.sh stop      # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  ./start.sh restart   # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    echo "  ./start.sh status    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "  ./start.sh logs      # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    
    echo -e "\n${CYAN}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${NC}"
    echo "  tail -f logs/api.log     # –õ–æ–≥–∏ API"
    echo "  tail -f logs/worker.log  # –õ–æ–≥–∏ Worker"
    
    echo -e "\n${GREEN}üéâ GPTInfernse –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!${NC}"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
stop_system() {
    header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API
    if [ -f .api.pid ]; then
        API_PID=$(cat .api.pid)
        if kill $API_PID 2>/dev/null; then
            success "API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: $API_PID)"
        fi
        rm -f .api.pid
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Worker
    if [ -f .worker.pid ]; then
        WORKER_PID=$(cat .worker.pid)
        if kill $WORKER_PID 2>/dev/null; then
            success "Celery worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: $WORKER_PID)"
        fi
        rm -f .worker.pid
    fi
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    pkill -f "uvicorn.*app.main:app" 2>/dev/null || true
    pkill -f "celery.*worker" 2>/dev/null || true
    
    success "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    header "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
    
    # API
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        success "‚úÖ API —Å–µ—Ä–≤–µ—Ä: –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost:8000)"
    else
        error "‚ùå API —Å–µ—Ä–≤–µ—Ä: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # Redis
    if redis-cli ping > /dev/null 2>&1; then
        success "‚úÖ Redis: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "‚ùå Redis: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # Ollama
    if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
        success "‚úÖ Ollama: –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost:11434)"
    else
        error "‚ùå Ollama: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # Worker
    if pgrep -f "celery.*worker" > /dev/null; then
        success "‚úÖ Celery Worker: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "‚ùå Celery Worker: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    header "–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"
    
    echo -e "${CYAN}=== API –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫) ===${NC}"
    tail -n 20 logs/api.log 2>/dev/null || echo "–õ–æ–≥–∏ API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    echo -e "\n${CYAN}=== Worker –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫) ===${NC}"
    tail -n 20 logs/worker.log 2>/dev/null || echo "–õ–æ–≥–∏ Worker –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-start}" in
        start)
            header "üöÄ –ó–∞–ø—É—Å–∫ GPTInfernse"
            install_dependencies
            check_ollama
            setup_environment
            start_redis
            stop_existing
            start_api
            start_worker
            sleep 3
            test_system
            show_info
            ;;
        stop)
            stop_system
            ;;
        restart)
            stop_system
            sleep 2
            $0 start
            ;;
        status)
            check_status
            ;;
        logs)
            show_logs
            ;;
        test)
            test_system
            ;;
        help|--help|-h)
            echo "üöÄ GPTInfernse - –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
            echo "  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
            echo "  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
            echo "  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
            echo "  test     - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"
            echo "  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0           # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
            echo "  $0 start     # –¢–æ –∂–µ —Å–∞–º–æ–µ"
            echo "  $0 status    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            echo "  $0 stop      # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            $0 help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
