#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GPTInfernse
"""

import asyncio
import asyncpg
import redis.asyncio as redis
import json
import sys
from datetime import datetime


async def check_postgres():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(
            "postgresql://gptinfernse:gptinfernse_password@localhost:5432/gptinfernse"
        )
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        tables = await conn.fetch("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"  - {table['table_name']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        user_count = await conn.fetchval("SELECT COUNT(*) FROM users WHERE is_active = TRUE")
        print(f"  üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
        
        # –î–∏–∞–ª–æ–≥–∏
        conv_count = await conn.fetchval("SELECT COUNT(*) FROM conversations WHERE is_active = TRUE")
        print(f"  üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {conv_count}")
        
        # –°–æ–æ–±—â–µ–Ω–∏—è
        msg_count = await conn.fetchval("SELECT COUNT(*) FROM messages")
        print(f"  üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {msg_count}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏
        recent_convs = await conn.fetch("""
            SELECT conversation_id, user_identifier, message_count, created_at, updated_at
            FROM conversations c
            LEFT JOIN users u ON c.user_id = u.id
            WHERE c.is_active = TRUE
            ORDER BY c.updated_at DESC
            LIMIT 5
        """)
        
        if recent_convs:
            print("\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏:")
            for conv in recent_convs:
                print(f"  - {conv['conversation_id'][:8]}... | {conv['user_identifier']} | {conv['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π | {conv['updated_at']}")
        else:
            print("\n‚ùå –î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        recent_msgs = await conn.fetch("""
            SELECT m.message_id, m.role, LEFT(m.content, 50) as content_preview, 
                   m.created_at, c.conversation_id
            FROM messages m
            JOIN conversations c ON m.conversation_id = c.id
            ORDER BY m.created_at DESC
            LIMIT 5
        """)
        
        if recent_msgs:
            print("\nüí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            for msg in recent_msgs:
                print(f"  - {msg['role']}: {msg['content_preview']}... | {msg['created_at']}")
        else:
            print("\n‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}")
        return False


async def check_redis():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∏ –∫—ç—à."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        redis_client = redis.from_url(
            "redis://localhost:6379/0",
            encoding="utf-8",
            decode_responses=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await redis_client.ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
        info = await redis_client.info("memory")
        memory_mb = info.get("used_memory", 0) / (1024 * 1024)
        print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Redis: {memory_mb:.2f} MB")
        
        # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–π –ø–∞–º—è—Ç–∏
        conversation_keys = await redis_client.keys("memory:conversation:*")
        user_keys = await redis_client.keys("memory:user:*")
        system_keys = await redis_client.keys("memory:system:*")
        
        print(f"üîë –ö–ª—é—á–∏ –≤ Redis:")
        print(f"  - –î–∏–∞–ª–æ–≥–∏: {len(conversation_keys)}")
        print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(user_keys)}")
        print(f"  - –°–∏—Å—Ç–µ–º–Ω—ã–µ: {len(system_keys)}")
        
        # –ù–æ–≤—ã–µ –∫–ª—é—á–∏ (hybrid manager)
        hybrid_conv_keys = await redis_client.keys("conversation:*")
        hybrid_user_keys = await redis_client.keys("user:*")
        
        print(f"üîë –ì–∏–±—Ä–∏–¥–Ω—ã–µ –∫–ª—é—á–∏:")
        print(f"  - –î–∏–∞–ª–æ–≥–∏: {len(hybrid_conv_keys)}")
        print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(hybrid_user_keys)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if hybrid_conv_keys:
            print("\nüìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞:")
            sample_key = hybrid_conv_keys[0]
            data = await redis_client.get(sample_key)
            if data:
                try:
                    parsed = json.loads(data)
                    print(f"  –ö–ª—é—á: {sample_key}")
                    print(f"  ID –¥–∏–∞–ª–æ–≥–∞: {parsed.get('conversation_id', 'N/A')}")
                    print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {parsed.get('user_id', 'N/A')}")
                    print(f"  –°–æ–æ–±—â–µ–Ω–∏–π: {len(parsed.get('messages', []))}")
                except:
                    print(f"  –ö–ª—é—á: {sample_key} (–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å)")
        
        await redis_client.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        return False


async def check_memory_integration():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏
        sys.path.append('/Users/masterpo/Documents/GPTInfernse')
        from app.services.hybrid_memory_manager import get_hybrid_memory_manager
        from app.models.memory import ConversationMessage
        
        memory_manager = get_hybrid_memory_manager()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        test_conversation_id = f"test_conv_{int(datetime.now().timestamp())}"
        test_user_id = "test_user"
        
        test_message = ConversationMessage(
            id="test_msg_1",
            role="user",
            content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏",
            tokens=10
        )
        
        print(f"üíæ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        success = await memory_manager.save_conversation_message(
            conversation_id=test_conversation_id,
            message=test_message,
            user_id=test_user_id,
            ttl_hours=1
        )
        
        if success:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            conversation = await memory_manager.get_conversation_memory(test_conversation_id)
            if conversation:
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {len(conversation.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥")
        else:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        
        await memory_manager.close()
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ GPTInfernse")
    print("=" * 50)
    
    postgres_ok = await check_postgres()
    redis_ok = await check_redis()
    integration_ok = await check_memory_integration()
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print(f"  PostgreSQL: {'‚úÖ OK' if postgres_ok else '‚ùå FAIL'}")
    print(f"  Redis: {'‚úÖ OK' if redis_ok else '‚ùå FAIL'}")
    print(f"  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ OK' if integration_ok else '‚ùå FAIL'}")
    
    if not all([postgres_ok, redis_ok, integration_ok]):
        print("\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        if not postgres_ok:
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
        if not redis_ok:
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis")
        if not integration_ok:
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏")
    else:
        print("\nüéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
