version: '3.8'

services:
  # Redis для кеша и очередей
  redis:
    image: redis:7-alpine
    container_name: gptinfernse_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - gptinfernse_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Ollama service
  ollama:
    image: ollama/ollama:latest
    container_name: gptinfernse_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    # Раскомментируйте для GPU поддержки
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    restart: unless-stopped
    networks:
      - gptinfernse_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Server
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: gptinfernse_api
    ports:
      - "8000:8000"
    environment:
      - APP_NAME=GPTInfernse
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - OLLAMA_BASE_URL=http://ollama:11434
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - RATE_LIMIT_PER_MINUTE=60
      - RATE_LIMIT_PER_HOUR=1000
      - SECRET_KEY=docker-secret-key-12345
      - ENABLE_METRICS=true
    depends_on:
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - .:/app
    command: >
      sh -c "python -m uvicorn app.main:app 
             --host 0.0.0.0 
             --port 8000 
             --reload 
             --log-level debug"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - gptinfernse_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Celery Worker
  worker:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: gptinfernse_worker
    environment:
      - APP_NAME=GPTInfernse
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - OLLAMA_BASE_URL=http://ollama:11434
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - .:/app
    command: >
      celery -A app.utils.celery_app.celery_app worker 
      --loglevel=debug 
      --queues=chat_queue,chat_stream_queue 
      --concurrency=2 
      --max-tasks-per-child=100
    healthcheck:
      test: ["CMD", "celery", "-A", "app.utils.celery_app.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - gptinfernse_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Frontend Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: gptinfernse_frontend
    ports:
      - "3000:3000"
    environment:
      - API_BASE_URL=http://localhost:8000
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - gptinfernse_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: gptinfernse_nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    networks:
      - gptinfernse_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Flower для мониторинга Celery
  flower:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: gptinfernse_flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=admin:admin123
    depends_on:
      redis:
        condition: service_healthy
    command: >
      celery -A app.utils.celery_app.celery_app flower 
      --port=5555 
      --basic_auth=admin:admin123
    restart: unless-stopped
    networks:
      - gptinfernse_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log aggregator (для централизованного логирования)
  logspout:
    image: gliderlabs/logspout:latest
    container_name: gptinfernse_logspout
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs:/logs
    command: >
      sh -c "logspout file:///logs/docker.log"
    restart: unless-stopped
    networks:
      - gptinfernse_network

volumes:
  redis_data:
    driver: local
  ollama_data:
    driver: local

networks:
  gptinfernse_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
