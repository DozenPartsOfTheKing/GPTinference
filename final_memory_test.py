#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import subprocess
import json
import time

def final_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏."""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–ê–ú–Ø–¢–ò")
    print("=" * 50)
    
    # 1. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏...")
    containers = ['gptinfernse-api', 'gptinfernse-worker']
    
    for container in containers:
        try:
            restart_cmd = ['docker', 'restart', container]
            result = subprocess.run(restart_cmd, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {container} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
    time.sleep(10)
    
    # 2. –¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
    print("\nüí¨ –¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥...")
    
    messages = [
        {
            "prompt": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π. –ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ.",
            "conversation_id": "final_test_conv",
            "user_id": "final_test_user"
        },
        {
            "prompt": "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
            "conversation_id": "final_test_conv", 
            "user_id": "final_test_user"
        }
    ]
    
    for i, msg in enumerate(messages, 1):
        print(f"\nüì§ –°–æ–æ–±—â–µ–Ω–∏–µ {i}: {msg['prompt']}")
        
        chat_request = {
            "prompt": msg["prompt"],
            "model": "llama3.2",
            "conversation_id": msg["conversation_id"],
            "stream": False
        }
        
        curl_cmd = [
            'curl', '-X', 'POST',
            'http://localhost:8000/chat/sync',
            '-H', 'Content-Type: application/json',
            '-H', f'X-User-ID: {msg["user_id"]}',
            '-d', json.dumps(chat_request),
            '--max-time', '30'
        ]
        
        try:
            result = subprocess.run(curl_cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                try:
                    response = json.loads(result.stdout)
                    print(f"ü§ñ –û—Ç–≤–µ—Ç: {response.get('response', 'N/A')[:100]}...")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    time.sleep(2)
                    
                except json.JSONDecodeError:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç: {result.stdout}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("-" * 30)
    
    # –õ–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫...")
    try:
        logs_cmd = ['docker', 'logs', '--tail', '30', 'gptinfernse-api']
        logs_result = subprocess.run(logs_cmd, capture_output=True, text=True)
        
        if logs_result.returncode == 0:
            logs = logs_result.stdout + logs_result.stderr
            
            # –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            critical_errors = []
            for line in logs.split('\n'):
                if any(word in line.lower() for word in ['error', 'coroutine', 'invalid input']):
                    critical_errors.append(line)
            
            if critical_errors:
                print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
                for error in critical_errors[-3:]:
                    print(f"  {error}")
            else:
                print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    # –ë–î
    print("\nüìà –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:")
    try:
        db_cmd = [
            'docker', 'exec', 'gptinfernse-postgres',
            'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
            '-c', '''
            SELECT 
                (SELECT COUNT(*) FROM users) as users,
                (SELECT COUNT(*) FROM conversations) as conversations,
                (SELECT COUNT(*) FROM messages) as messages;
            '''
        ]
        
        db_result = subprocess.run(db_cmd, capture_output=True, text=True)
        
        if db_result.returncode == 0:
            print(db_result.stdout)
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–µ—Ç–∞–ª–∏
            if "1" in db_result.stdout and "2" in db_result.stdout:
                print("üéâ –ü–ê–ú–Ø–¢–¨ –†–ê–ë–û–¢–ê–ï–¢! –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è!")
                
                # –ü–æ–∫–∞–∂–µ–º –¥–µ—Ç–∞–ª–∏
                details_cmd = [
                    'docker', 'exec', 'gptinfernse-postgres',
                    'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
                    '-c', '''
                    SELECT u.user_identifier, c.conversation_id, COUNT(m.id) as message_count
                    FROM users u
                    LEFT JOIN conversations c ON u.id = c.user_id
                    LEFT JOIN messages m ON c.id = m.conversation_id
                    GROUP BY u.user_identifier, c.conversation_id;
                    '''
                ]
                
                details_result = subprocess.run(details_cmd, capture_output=True, text=True)
                if details_result.returncode == 0:
                    print("üìã –î–µ—Ç–∞–ª–∏:")
                    print(details_result.stdout)
            else:
                print("‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
    
    # Redis
    print("\nüîë Redis –∫—ç—à:")
    try:
        redis_cmd = ['docker', 'exec', 'gptinfernse-redis', 'redis-cli', 'keys', '*conv*']
        redis_result = subprocess.run(redis_cmd, capture_output=True, text=True)
        
        if redis_result.returncode == 0:
            keys = redis_result.stdout.strip().split('\n') if redis_result.stdout.strip() else []
            if keys and keys[0]:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {len(keys)}")
                for key in keys:
                    if key.strip():
                        print(f"  - {key}")
            else:
                print("‚ö†Ô∏è  –ö–ª—é—á–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    final_test()
    
    print("\n" + "=" * 50)
    print("üèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("‚úÖ –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î - –ü–ê–ú–Ø–¢–¨ –†–ê–ë–û–¢–ê–ï–¢!")
    print("‚ùå –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å - –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    print("\nüéØ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:")
    print("1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–∞—Ç —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ http://localhost:3000")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω–∫—É http://localhost:3002") 
    print("3. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")

if __name__ == "__main__":
    main()
