#!/bin/bash

# üê≥ GPTInfernse Docker Full Stack
# –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç + –±–µ–∫ + Ollama –≤ Docker —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log() { echo -e "${BLUE}[DOCKER]${NC} $1"; }
success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
warning() { echo -e "${YELLOW}[!]${NC} $1"; }
error() { echo -e "${RED}[‚úó]${NC} $1"; }
header() { echo -e "${PURPLE}=== $1 ===${NC}"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    header "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        log "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        log "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose"
        exit 1
    fi
    
    if ! docker info > /dev/null 2>&1; then
        error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        log "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏–ª–∏ Docker daemon"
        exit 1
    fi
    
    success "Docker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
prepare_environment() {
    header "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p logs data/redis data/ollama
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è Docker
    if [ ! -f ".env.docker" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ .env.docker —Ñ–∞–π–ª–∞..."
        cat > .env.docker << 'EOF'
# Docker Environment
COMPOSE_PROJECT_NAME=gptinfernse
DOCKER_BUILDKIT=1

# Application
APP_NAME=GPTInfernse
DEBUG=true
LOG_LEVEL=DEBUG

# API
API_HOST=0.0.0.0
API_PORT=8000

# Redis
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# Ollama
OLLAMA_BASE_URL=http://ollama:11434
OLLAMA_TIMEOUT=300

# Celery
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# Security
SECRET_KEY=docker-secret-key-12345

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000
EOF
        success ".env.docker —Å–æ–∑–¥–∞–Ω"
    else
        success ".env.docker —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    chmod +x debug_logs.sh 2>/dev/null || true
    
    success "–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    header "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"
    
    log "–°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    if docker-compose -f docker-compose.full.yml build --no-cache; then
        success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    header "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    log "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if docker-compose -f docker-compose.full.yml --env-file .env.docker up -d; then
        success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
    else
        error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
        show_logs
        exit 1
    fi
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º Redis
    for i in {1..30}; do
        if docker-compose -f docker-compose.full.yml exec -T redis redis-cli ping > /dev/null 2>&1; then
            success "‚úÖ Redis –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 2
        echo -n "."
    done
    
    # –ñ–¥–µ–º Ollama
    log "–û–∂–∏–¥–∞–Ω–∏–µ Ollama (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)..."
    for i in {1..60}; do
        if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
            success "‚úÖ Ollama –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 5
        echo -n "."
    done
    
    # –ñ–¥–µ–º API
    log "–û–∂–∏–¥–∞–Ω–∏–µ API —Å–µ—Ä–≤–µ—Ä–∞..."
    for i in {1..30}; do
        if curl -s http://localhost:8000/health > /dev/null 2>&1; then
            success "‚úÖ API –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 3
        echo -n "."
    done
    
    # –ñ–¥–µ–º Frontend
    log "–û–∂–∏–¥–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
    for i in {1..20}; do
        if curl -s http://localhost:3000 > /dev/null 2>&1; then
            success "‚úÖ Frontend –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 2
        echo -n "."
    done
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ Ollama
install_models() {
    header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π Ollama"
    
    MODELS=("llama3" "mistral")
    
    for model in "${MODELS[@]}"; do
        log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ $model..."
        if docker-compose -f docker-compose.full.yml exec -T ollama ollama pull "$model"; then
            success "–ú–æ–¥–µ–ª—å $model —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        else
            warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å $model"
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
check_status() {
    header "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    # Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log "–°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose -f docker-compose.full.yml ps
    
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:"
    
    # API
    if curl -s http://localhost:8000/health > /dev/null; then
        success "‚úÖ API (http://localhost:8000)"
    else
        error "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Ollama
    if curl -s http://localhost:11434/api/tags > /dev/null; then
        success "‚úÖ Ollama (http://localhost:11434)"
        MODEL_COUNT=$(curl -s http://localhost:11434/api/tags | jq -r '.models | length' 2>/dev/null || echo "0")
        log "   –ú–æ–¥–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $MODEL_COUNT"
    else
        error "‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Frontend
    if curl -s http://localhost:3000 > /dev/null; then
        success "‚úÖ Frontend (http://localhost:3000)"
    else
        error "‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Redis
    if docker-compose -f docker-compose.full.yml exec -T redis redis-cli ping > /dev/null 2>&1; then
        success "‚úÖ Redis"
    else
        error "‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Flower
    if curl -s http://localhost:5555 > /dev/null; then
        success "‚úÖ Flower (http://localhost:5555)"
    else
        warning "‚ö†Ô∏è Flower –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
test_system() {
    header "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    
    # –¢–µ—Å—Ç API –∑–¥–æ—Ä–æ–≤—å—è
    log "–¢–µ—Å—Ç API –∑–¥–æ—Ä–æ–≤—å—è..."
    if HEALTH=$(curl -s http://localhost:8000/health/detailed); then
        if echo "$HEALTH" | jq -e '.status == "healthy"' > /dev/null 2>&1; then
            success "‚úÖ API –∑–¥–æ—Ä–æ–≤"
        else
            warning "‚ö†Ô∏è API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
            echo "$HEALTH" | jq .
        fi
    else
        error "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # –¢–µ—Å—Ç —á–∞—Ç–∞
    log "–¢–µ—Å—Ç —á–∞—Ç–∞..."
    CHAT_PAYLOAD='{"prompt": "–ü—Ä–∏–≤–µ—Ç", "model": "llama3", "max_tokens": 20}'
    if CHAT_RESPONSE=$(curl -s -X POST http://localhost:8000/chat/sync \
        -H "Content-Type: application/json" \
        -d "$CHAT_PAYLOAD"); then
        
        if echo "$CHAT_RESPONSE" | jq -e '.response' > /dev/null 2>&1; then
            success "‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
            RESPONSE=$(echo "$CHAT_RESPONSE" | jq -r '.response')
            log "   –û—Ç–≤–µ—Ç: $RESPONSE"
        else
            error "‚ùå –ß–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            echo "–û—Ç–≤–µ—Ç: $CHAT_RESPONSE"
        fi
    else
        error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    header "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    log "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.full.yml logs --tail=50
}

# –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏
follow_logs() {
    header "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    log "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    
    docker-compose -f docker-compose.full.yml logs -f
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.full.yml down
    
    success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
cleanup() {
    header "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
    
    warning "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã –∏ –¥–∞–Ω–Ω—ã–µ!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker-compose -f docker-compose.full.yml down -v --remove-orphans
        
        log "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤..."
        docker rmi $(docker images "gptinfernse*" -q) 2>/dev/null || true
        
        log "–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã Docker..."
        docker system prune -f
        
        success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        log "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
show_info() {
    header "üéâ GPTInfernse –∑–∞–ø—É—â–µ–Ω –≤ Docker!"
    
    echo -e "${CYAN}üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:${NC}"
    echo "  üé® –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:    http://localhost:3000"
    echo "  üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:     http://localhost:8000/docs"
    echo "  üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:     http://localhost:8000/health/detailed"
    echo "  üå∏ Flower (Celery):      http://localhost:5555 (admin/admin123)"
    echo "  üîÑ Nginx (–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫): http://localhost:80"
    
    echo -e "\n${CYAN}üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${NC}"
    echo "  $0 status     # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "  $0 logs       # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  $0 logs-f     # –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏"
    echo "  $0 test       # –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  $0 stop       # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
    echo "  $0 restart    # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    
    echo -e "\n${CYAN}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${NC}"
    echo "  docker-compose -f docker-compose.full.yml ps    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  docker-compose -f docker-compose.full.yml logs  # –í—Å–µ –ª–æ–≥–∏"
    echo "  docker stats                                     # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    
    echo -e "\n${GREEN}üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ!${NC}"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-start}" in
        start)
            header "üê≥ –ó–∞–ø—É—Å–∫ GPTInfernse –≤ Docker"
            check_docker
            prepare_environment
            build_images
            start_services
            install_models
            sleep 5
            check_status
            test_system
            show_info
            ;;
        stop)
            stop_services
            ;;
        restart)
            stop_services
            sleep 3
            $0 start
            ;;
        status)
            check_status
            ;;
        logs)
            show_logs
            ;;
        logs-f)
            follow_logs
            ;;
        test)
            test_system
            ;;
        build)
            build_images
            ;;
        models)
            install_models
            ;;
        cleanup)
            cleanup
            ;;
        debug)
            # –ó–∞–ø—É—Å–∫ debug —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Docker
            if [ -f debug_logs.sh ]; then
                ./debug_logs.sh
            else
                error "debug_logs.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        help|--help|-h)
            echo "üê≥ GPTInfernse Docker Manager"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É –≤ Docker (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
            echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
            echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
            echo "  logs-f    - –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            echo "  test      - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"
            echo "  build     - –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã"
            echo "  models    - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏ Ollama"
            echo "  cleanup   - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª–∏—Ç—å –≤—Å–µ)"
            echo "  debug     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ª–∞–¥—á–∏–∫"
            echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo ""
            echo "–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞:"
            echo "  üé® http://localhost:3000  - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
            echo "  üìö http://localhost:8000  - API"
            echo "  üå∏ http://localhost:5555  - Flower"
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            $0 help
            exit 1
            ;;
    esac
}

main "$@"
