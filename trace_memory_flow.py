#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π—Å–∏–Ω–≥ –ø–æ—Ç–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
"""

import subprocess
import json
import time

def get_detailed_logs(container, lines=50):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""
    try:
        cmd = ['docker', 'logs', '--tail', str(lines), container]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            return result.stdout + "\n" + result.stderr
        else:
            return f"Error getting logs: {result.stderr}"
    except Exception as e:
        return f"Exception: {e}"

def trace_chat_request():
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —á–∞—Ç-–∑–∞–ø—Ä–æ—Å–∞."""
    print("üîç –¢–†–ï–ô–°–ò–ù–ì –ü–û–õ–ù–û–ì–û –ü–£–¢–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–ò")
    print("=" * 60)
    
    # 1. –û—á–∏—Å—Ç–∏–º –ª–æ–≥–∏ (–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —á–∏—Å—Ç—ã—Ö –ª–æ–≥–æ–≤)
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —á–∏—Å—Ç—ã—Ö –ª–æ–≥–æ–≤...")
    containers = ['gptinfernse-api', 'gptinfernse-worker']
    
    for container in containers:
        try:
            restart_cmd = ['docker', 'restart', container]
            subprocess.run(restart_cmd, capture_output=True, text=True)
            print(f"‚úÖ {container} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {container}: {e}")
    
    print("‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
    time.sleep(10)
    
    # 2. –û—Ç–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
    
    chat_request = {
        "prompt": "–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏: –∑–∞–ø–æ–º–Ω–∏ —á–∏—Å–ª–æ 12345",
        "model": "llama3.2",
        "conversation_id": "trace_conv_999",
        "stream": False
    }
    
    curl_cmd = [
        'curl', '-X', 'POST',
        'http://localhost:8000/chat/sync',
        '-H', 'Content-Type: application/json',
        '-H', 'X-User-ID: trace_user_999',
        '-d', json.dumps(chat_request),
        '--max-time', '60',
        '-v'  # Verbose –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    ]
    
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(curl_cmd)}")
    
    try:
        result = subprocess.run(curl_cmd, capture_output=True, text=True)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:")
        print(f"Return code: {result.returncode}")
        print(f"STDOUT: {result.stdout}")
        print(f"STDERR: {result.stderr}")
        
        if result.returncode == 0:
            try:
                response = json.loads(result.stdout)
                print(f"\n‚úÖ –ß–∞—Ç –æ—Ç–≤–µ—Ç–∏–ª:")
                print(f"  –û—Ç–≤–µ—Ç: {response.get('response', 'N/A')[:100]}...")
                print(f"  –î–∏–∞–ª–æ–≥: {response.get('conversation_id', 'N/A')}")
                print(f"  –í—Ä–µ–º—è: {response.get('processing_time', 'N/A')}")
            except:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç–≤–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # 3. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏
    print(f"\nüîç –õ–û–ì–ò API (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞):")
    print("-" * 40)
    api_logs = get_detailed_logs('gptinfernse-api', 30)
    print(api_logs)
    
    print(f"\nüîç –õ–û–ì–ò WORKER (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞):")
    print("-" * 40)
    worker_logs = get_detailed_logs('gptinfernse-worker', 30)
    print(worker_logs)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –∏ Redis
    print(f"\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –ó–ê–ü–†–û–°–ê:")
    print("-" * 40)
    
    # –ë–î
    try:
        db_cmd = [
            'docker', 'exec', 'gptinfernse-postgres',
            'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
            '-c', '''
            SELECT 
                (SELECT COUNT(*) FROM users) as users,
                (SELECT COUNT(*) FROM conversations) as conversations,
                (SELECT COUNT(*) FROM messages) as messages;
            '''
        ]
        
        db_result = subprocess.run(db_cmd, capture_output=True, text=True)
        print(f"–ë–î —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {db_result.stdout}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
    
    # Redis
    try:
        redis_cmd = ['docker', 'exec', 'gptinfernse-redis', 'redis-cli', 'keys', '*']
        redis_result = subprocess.run(redis_cmd, capture_output=True, text=True)
        
        if redis_result.returncode == 0:
            keys = redis_result.stdout.strip().split('\n') if redis_result.stdout.strip() else []
            print(f"Redis –∫–ª—é—á–∏ ({len(keys)}):")
            for key in keys[:10]:  # –ü–µ—Ä–≤—ã–µ 10
                if key.strip():
                    print(f"  - {key}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis: {e}")

def analyze_memory_flow():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ –∫–æ–¥–µ."""
    print(f"\nüî¨ –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –ü–ê–ú–Ø–¢–ò –í –ö–û–î–ï:")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    print("üîç –ü–æ–∏—Å–∫ –≤—ã–∑–æ–≤–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ –ª–æ–≥–∞—Ö...")
    
    containers = ['gptinfernse-api', 'gptinfernse-worker']
    
    for container in containers:
        print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ {container}:")
        logs = get_detailed_logs(container, 100)
        
        # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
        memory_keywords = [
            'save_conversation_message',
            'Saving conversation to memory',
            'Failed to save conversation',
            'Memory manager',
            'database_manager',
            'hybrid_memory_manager'
        ]
        
        found_memory_logs = []
        lines = logs.split('\n')
        
        for i, line in enumerate(lines):
            for keyword in memory_keywords:
                if keyword.lower() in line.lower():
                    found_memory_logs.append(f"Line {i}: {line}")
        
        if found_memory_logs:
            print("  üîç –ù–∞–π–¥–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:")
            for log in found_memory_logs[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                print(f"    {log}")
        else:
            print("  ‚ùå –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ù–ï –ù–ê–ô–î–ï–ù–´!")
        
        # –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫
        error_lines = []
        for i, line in enumerate(lines):
            if any(word in line.lower() for word in ['error', 'exception', 'traceback', 'failed']):
                error_lines.append(f"Line {i}: {line}")
        
        if error_lines:
            print("  ‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:")
            for error in error_lines[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                print(f"    {error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞."""
    print("üöÄ –î–ï–¢–ê–õ–¨–ù–´–ô –¢–†–ï–ô–°–ò–ù–ì –ü–ê–ú–Ø–¢–ò GPTInfernse")
    print("=" * 60)
    
    # –¢—Ä–µ–π—Å–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
    trace_chat_request()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫
    analyze_memory_flow()
    
    print("\n" + "=" * 60)
    print("üìã –í–´–í–û–î–´:")
    print("1. –ï—Å–ª–∏ –≤ –ª–æ–≥–∞—Ö –ù–ï–¢ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π 'save_conversation_message' - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    print("2. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ —Å 'database' –∏–ª–∏ 'redis' - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
    print("3. –ï—Å–ª–∏ –µ—Å—Ç—å 'Failed to save' - –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ worker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –æ—Ç API")

if __name__ == "__main__":
    main()
