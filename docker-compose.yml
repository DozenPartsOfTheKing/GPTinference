version: '3.8'

services:
  # PostgreSQL для персистентного хранения
  postgres:
    image: postgres:15-alpine
    container_name: gptinfernse-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=gptinfernse
      - POSTGRES_USER=gptinfernse
      - POSTGRES_PASSWORD=gptinfernse_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gptinfernse -d gptinfernse"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - gptinfernse

  # Redis для кеширования и очередей
  redis:
    image: redis:7-alpine
    container_name: gptinfernse-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - gptinfernse

  # Ollama для LLM моделей
  ollama:
    image: ollama/ollama:latest
    container_name: gptinfernse-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    # GPU поддержка включена
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - gptinfernse

  # API сервер
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: gptinfernse-api
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - DATABASE_URL=postgresql://gptinfernse:gptinfernse_password@postgres:5432/gptinfernse
      - OLLAMA_BASE_URL=http://ollama:11434
      - DEBUG=true
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./app:/app/app:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - gptinfernse

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: gptinfernse-worker
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - DATABASE_URL=postgresql://gptinfernse:gptinfernse_password@postgres:5432/gptinfernse
      - OLLAMA_BASE_URL=http://ollama:11434
      - DEBUG=true
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./app:/app/app:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - gptinfernse

  # Фронтенд
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: gptinfernse-frontend
    ports:
      - "3000:3000"
    environment:
      - API_BASE_URL=http://localhost:8000
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - gptinfernse

  # Админка
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile.admin
    container_name: gptinfernse-admin
    ports:
      - "3002:3002"
    environment:
      - API_BASE_URL=http://localhost:8000
      - REDIS_HOST=redis
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - gptinfernse

  # Flower для мониторинга Celery
  flower:
    image: mher/flower:latest
    container_name: gptinfernse-flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
      - FLOWER_BASIC_AUTH=admin:admin123
    depends_on:
      - redis
      - worker
    restart: unless-stopped
    networks:
      - gptinfernse

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local

networks:
  gptinfernse:
    driver: bridge