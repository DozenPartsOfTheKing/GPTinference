version: '3.8'

services:
  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: gptinfernse_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - gptinfernse_network

  # Ollama service (assuming you already have it)
  # If you need to set it up, uncomment and configure:
  # ollama:
  #   image: ollama/ollama:latest
  #   container_name: gptinfernse_ollama
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   environment:
  #     - OLLAMA_ORIGINS=*
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   restart: unless-stopped
  #   networks:
  #     - gptinfernse_network

  # API Server
  api:
    build: .
    container_name: gptinfernse_api
    ports:
      - "8000:8000"
    environment:
      - APP_NAME=GPTInfernse
      - DEBUG=false
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - RATE_LIMIT_PER_MINUTE=60
      - RATE_LIMIT_PER_HOUR=1000
      - SECRET_KEY=your-production-secret-key-here
      - ENABLE_METRICS=true
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: >
      sh -c "python -m uvicorn app.main:app 
             --host 0.0.0.0 
             --port 8000 
             --workers 4 
             --access-log 
             --log-level info"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - gptinfernse_network

  # Celery Worker for chat processing
  worker:
    build: .
    container_name: gptinfernse_worker
    environment:
      - APP_NAME=GPTInfernse
      - DEBUG=false
      - LOG_LEVEL=INFO
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: >
      celery -A app.utils.celery_app.celery_app worker 
      --loglevel=info 
      --queues=chat_queue,chat_stream_queue 
      --concurrency=4 
      --max-tasks-per-child=100
    healthcheck:
      test: ["CMD", "celery", "-A", "app.utils.celery_app.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      replicas: 2
    networks:
      - gptinfernse_network

  # Celery Beat (for periodic tasks, if needed)
  beat:
    build: .
    container_name: gptinfernse_beat
    environment:
      - APP_NAME=GPTInfernse
      - DEBUG=false
      - LOG_LEVEL=INFO
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: >
      celery -A app.utils.celery_app.celery_app beat 
      --loglevel=info 
      --schedule=/tmp/celerybeat-schedule
    restart: unless-stopped
    networks:
      - gptinfernse_network

  # Flower for Celery monitoring
  flower:
    build: .
    container_name: gptinfernse_flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=admin:admin123
    depends_on:
      redis:
        condition: service_healthy
    command: >
      celery -A app.utils.celery_app.celery_app flower 
      --port=5555 
      --basic_auth=admin:admin123
    restart: unless-stopped
    networks:
      - gptinfernse_network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: gptinfernse_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - gptinfernse_network

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: gptinfernse_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - gptinfernse_network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: gptinfernse_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - gptinfernse_network

volumes:
  redis_data:
    driver: local
  # ollama_data:
  #   driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  gptinfernse_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
