#!/bin/bash

# üîç GPTInfernse Debug & Logs Script
# –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log() { echo -e "${BLUE}[DEBUG]${NC} $1"; }
success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
warning() { echo -e "${YELLOW}[!]${NC} $1"; }
error() { echo -e "${RED}[‚úó]${NC} $1"; }
header() { echo -e "${PURPLE}=== $1 ===${NC}"; }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
test_api_detailed() {
    header "–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /health..."
    if HEALTH_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\nTIME:%{time_total}" http://localhost:8000/health 2>&1); then
        echo "$HEALTH_RESPONSE"
        HTTP_CODE=$(echo "$HEALTH_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        if [ "$HTTP_CODE" = "200" ]; then
            success "Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            error "Health endpoint –≤–µ—Ä–Ω—É–ª –∫–æ–¥ $HTTP_CODE"
        fi
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API"
        return 1
    fi
    
    echo ""
    
    # –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /health/detailed..."
    if DETAILED_HEALTH=$(curl -s -w "\nHTTP_CODE:%{http_code}" http://localhost:8000/health/detailed 2>&1); then
        echo "$DETAILED_HEALTH"
        HTTP_CODE=$(echo "$DETAILED_HEALTH" | grep "HTTP_CODE:" | cut -d: -f2)
        if [ "$HTTP_CODE" = "200" ]; then
            success "Detailed health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            error "Detailed health endpoint –≤–µ—Ä–Ω—É–ª –∫–æ–¥ $HTTP_CODE"
        fi
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"
    fi
    
    echo ""
    
    # –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /models/..."
    if MODELS_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" http://localhost:8000/models/ 2>&1); then
        echo "$MODELS_RESPONSE"
        HTTP_CODE=$(echo "$MODELS_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        if [ "$HTTP_CODE" = "200" ]; then
            success "Models endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            error "Models endpoint –≤–µ—Ä–Ω—É–ª –∫–æ–¥ $HTTP_CODE"
        fi
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"
    fi
    
    echo ""
    
    # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /chat/sync —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º..."
    CHAT_PAYLOAD='{"prompt": "–ü—Ä–∏–≤–µ—Ç", "model": "llama3", "max_tokens": 50}'
    log "Payload: $CHAT_PAYLOAD"
    
    if CHAT_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\nTIME:%{time_total}" \
        -X POST http://localhost:8000/chat/sync \
        -H "Content-Type: application/json" \
        -d "$CHAT_PAYLOAD" 2>&1); then
        
        echo "=== CHAT RESPONSE ==="
        echo "$CHAT_RESPONSE"
        echo "===================="
        
        HTTP_CODE=$(echo "$CHAT_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        TIME=$(echo "$CHAT_RESPONSE" | grep "TIME:" | cut -d: -f2)
        
        if [ "$HTTP_CODE" = "200" ]; then
            success "Chat endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤—Ä–µ–º—è: ${TIME}s)"
        else
            error "Chat endpoint –≤–µ—Ä–Ω—É–ª –∫–æ–¥ $HTTP_CODE"
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
            if echo "$CHAT_RESPONSE" | grep -q "Model.*not found"; then
                error "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ Ollama"
            elif echo "$CHAT_RESPONSE" | grep -q "Connection"; then
                error "–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama"
            fi
        fi
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
check_all_services() {
    header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    # API Server
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ API Server (–ø–æ—Ä—Ç 8000)..."
    if curl -s http://localhost:8000/health > /dev/null; then
        success "‚úÖ API Server —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "‚ùå API Server –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        log "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/api.log"
    fi
    
    # Ollama
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama (–ø–æ—Ä—Ç 11434)..."
    if OLLAMA_RESPONSE=$(curl -s http://localhost:11434/api/tags); then
        success "‚úÖ Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç"
        MODEL_COUNT=$(echo "$OLLAMA_RESPONSE" | jq -r '.models | length' 2>/dev/null || echo "0")
        log "–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: $MODEL_COUNT"
        
        if [ "$MODEL_COUNT" -gt 0 ]; then
            log "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"
            echo "$OLLAMA_RESPONSE" | jq -r '.models[].name' 2>/dev/null | while read model; do
                echo "  - $model"
            done
        else
            warning "–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: ollama pull llama3"
        fi
    else
        error "‚ùå Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        log "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve"
    fi
    
    # Redis
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis (–ø–æ—Ä—Ç 6379)..."
    if redis-cli ping > /dev/null 2>&1; then
        success "‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "‚ùå Redis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        log "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo service redis-server start"
    fi
    
    # Celery Worker
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Celery Worker..."
    if pgrep -f "celery.*worker" > /dev/null; then
        success "‚úÖ Celery Worker —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "‚ùå Celery Worker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        log "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/worker.log"
    fi
    
    # Frontend
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend (–ø–æ—Ä—Ç 3000)..."
    if curl -s http://localhost:3000 > /dev/null; then
        success "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "‚ùå Frontend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        log "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/frontend.log"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏
show_all_logs() {
    header "–í—Å–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"
    
    echo -e "${CYAN}=== API Server Logs ===${NC}"
    if [ -f logs/api.log ]; then
        tail -n 30 logs/api.log
    else
        warning "–§–∞–π–ª logs/api.log –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo -e "\n${CYAN}=== Celery Worker Logs ===${NC}"
    if [ -f logs/worker.log ]; then
        tail -n 30 logs/worker.log
    else
        warning "–§–∞–π–ª logs/worker.log –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo -e "\n${CYAN}=== Frontend Logs ===${NC}"
    if [ -f logs/frontend.log ]; then
        tail -n 30 logs/frontend.log
    else
        warning "–§–∞–π–ª logs/frontend.log –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo -e "\n${CYAN}=== System Logs (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏) ===${NC}"
    journalctl --since "10 minutes ago" --no-pager | grep -i error | tail -10 || echo "–ù–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫"
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
live_monitoring() {
    header "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    log "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    
    while true; do
        clear
        echo -e "${PURPLE}=== GPTInfernse Live Monitor $(date) ===${NC}"
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
        echo -e "\n${CYAN}–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
        curl -s http://localhost:8000/health > /dev/null && echo "‚úÖ API" || echo "‚ùå API"
        curl -s http://localhost:11434/api/tags > /dev/null && echo "‚úÖ Ollama" || echo "‚ùå Ollama"
        redis-cli ping > /dev/null 2>&1 && echo "‚úÖ Redis" || echo "‚ùå Redis"
        pgrep -f "celery.*worker" > /dev/null && echo "‚úÖ Worker" || echo "‚ùå Worker"
        curl -s http://localhost:3000 > /dev/null && echo "‚úÖ Frontend" || echo "‚ùå Frontend"
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        echo -e "\n${CYAN}–†–µ—Å—É—Ä—Å—ã:${NC}"
        echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
        echo "RAM: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
        echo "Disk: $(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 ")"}')"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        echo -e "\n${CYAN}–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:${NC}"
        tail -n 5 logs/api.log 2>/dev/null | sed 's/^/API: /' || echo "API: –Ω–µ—Ç –ª–æ–≥–æ–≤"
        tail -n 3 logs/worker.log 2>/dev/null | sed 's/^/Worker: /' || echo "Worker: –Ω–µ—Ç –ª–æ–≥–æ–≤"
        
        sleep 5
    done
}

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
diagnose_issues() {
    header "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
    for port in 8000 11434 6379 3000; do
        if lsof -i :$port > /dev/null 2>&1; then
            PROCESS=$(lsof -i :$port | tail -1 | awk '{print $1 " (PID: " $2 ")"}')
            success "–ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç: $PROCESS"
        else
            warning "–ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    echo "Python –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    ps aux | grep python | grep -v grep | head -5
    
    echo "Celery –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    ps aux | grep celery | grep -v grep | head -3
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
    df -h | grep -E "(Filesystem|/dev/)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏..."
    free -h
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π..."
    netstat -tlnp | grep -E "(8000|11434|6379|3000)" | head -10
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º
fix_common_issues() {
    header "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º"
    
    log "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Redis..."
    sudo service redis-server restart
    sleep 2
    
    log "2. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    pkill -f "uvicorn.*app.main:app" 2>/dev/null || true
    pkill -f "celery.*worker" 2>/dev/null || true
    pkill -f "frontend/server.py" 2>/dev/null || true
    
    log "3. –û—á–∏—Å—Ç–∫–∞ PID —Ñ–∞–π–ª–æ–≤..."
    rm -f .api.pid .worker.pid .frontend.pid
    
    log "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
    chmod +x start.sh start_with_frontend.sh 2>/dev/null || true
    
    log "5. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    mkdir -p logs data frontend
    
    success "–ë–∞–∑–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
export_logs() {
    header "–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    EXPORT_DIR="debug_export_$TIMESTAMP"
    
    mkdir -p "$EXPORT_DIR"
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏
    cp -r logs/ "$EXPORT_DIR/" 2>/dev/null || true
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    {
        echo "=== System Info ==="
        uname -a
        echo ""
        echo "=== Python Version ==="
        python3 --version
        echo ""
        echo "=== Pip Packages ==="
        pip list
        echo ""
        echo "=== Environment Variables ==="
        env | grep -E "(OLLAMA|REDIS|CELERY|DEBUG)" | sort
        echo ""
        echo "=== Process List ==="
        ps aux | grep -E "(python|celery|uvicorn|ollama|redis)" | grep -v grep
        echo ""
        echo "=== Port Status ==="
        netstat -tlnp | grep -E "(8000|11434|6379|3000)"
        echo ""
        echo "=== Disk Space ==="
        df -h
        echo ""
        echo "=== Memory ==="
        free -h
    } > "$EXPORT_DIR/system_info.txt"
    
    # API —Ç–µ—Å—Ç—ã
    {
        echo "=== API Health Test ==="
        curl -s http://localhost:8000/health 2>&1 || echo "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        echo ""
        echo "=== Ollama Test ==="
        curl -s http://localhost:11434/api/tags 2>&1 || echo "Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        echo ""
        echo "=== Redis Test ==="
        redis-cli ping 2>&1 || echo "Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    } > "$EXPORT_DIR/api_tests.txt"
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    tar -czf "${EXPORT_DIR}.tar.gz" "$EXPORT_DIR"
    rm -rf "$EXPORT_DIR"
    
    success "–õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ ${EXPORT_DIR}.tar.gz"
    log "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_menu() {
    header "GPTInfernse Debug & Logs Menu"
    echo "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "2. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"
    echo "3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏"
    echo "4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º"
    echo "6. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
    echo "7. –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    echo "8. –í—ã—Ö–æ–¥"
    echo ""
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-8): " choice
    
    case $choice in
        1) check_all_services ;;
        2) test_api_detailed ;;
        3) show_all_logs ;;
        4) live_monitoring ;;
        5) diagnose_issues ;;
        6) fix_common_issues ;;
        7) export_logs ;;
        8) exit 0 ;;
        *) error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
    esac
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-menu}" in
        check) check_all_services ;;
        test) test_api_detailed ;;
        logs) show_all_logs ;;
        monitor) live_monitoring ;;
        diagnose) diagnose_issues ;;
        fix) fix_common_issues ;;
        export) export_logs ;;
        menu) show_menu ;;
        *) 
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [check|test|logs|monitor|diagnose|fix|export|menu]"
            exit 1
            ;;
    esac
}

main "$@"
