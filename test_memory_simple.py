#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ —á–∞—Ç API
"""

import subprocess
import json
import time

def test_chat_memory():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ —á–∞—Ç API."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ —á–∞—Ç...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É
    chat_request = {
        "prompt": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–µ—Å—Ç. –ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ.",
        "model": "llama3.2",
        "conversation_id": "test_memory_conv_123",
        "stream": False
    }
    
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç...")
        
        # –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É
        curl_cmd = [
            'curl', '-X', 'POST',
            'http://localhost:8000/chat/sync',
            '-H', 'Content-Type: application/json',
            '-H', 'X-User-ID: test_user_memory',
            '-d', json.dumps(chat_request),
            '--max-time', '30'
        ]
        
        result = subprocess.run(curl_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ß–∞—Ç –æ—Ç–≤–µ—Ç–∏–ª:")
            try:
                response = json.loads(result.stdout)
                print(f"  –û—Ç–≤–µ—Ç: {response.get('response', 'N/A')[:100]}...")
                print(f"  –î–∏–∞–ª–æ–≥: {response.get('conversation_id', 'N/A')}")
                print(f"  –¢–æ–∫–µ–Ω—ã: {response.get('tokens_used', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...")
                check_db()
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º Redis
                print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ Redis...")
                check_redis_cache()
                
                return True
                
            except json.JSONDecodeError:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç: {result.stdout}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {result.stderr}")
            print(f"Stdout: {result.stdout}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def check_db():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_cmd = [
            'docker', 'exec', 'gptinfernse-postgres',
            'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
            '-c', 'SELECT COUNT(*) as users FROM users;'
        ]
        
        users_result = subprocess.run(users_cmd, capture_output=True, text=True)
        if users_result.returncode == 0:
            print(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_result.stdout.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∏–∞–ª–æ–≥–∏
        conv_cmd = [
            'docker', 'exec', 'gptinfernse-postgres',
            'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
            '-c', 'SELECT COUNT(*) as conversations FROM conversations;'
        ]
        
        conv_result = subprocess.run(conv_cmd, capture_output=True, text=True)
        if conv_result.returncode == 0:
            print(f"  üí¨ –î–∏–∞–ª–æ–≥–∏: {conv_result.stdout.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_cmd = [
            'docker', 'exec', 'gptinfernse-postgres',
            'psql', '-U', 'gptinfernse', '-d', 'gptinfernse',
            '-c', 'SELECT COUNT(*) as messages FROM messages;'
        ]
        
        msg_result = subprocess.run(msg_cmd, capture_output=True, text=True)
        if msg_result.returncode == 0:
            print(f"  üìù –°–æ–æ–±—â–µ–Ω–∏—è: {msg_result.stdout.strip()}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

def check_redis_cache():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à –≤ Redis."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–ª—é—á–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        keys_cmd = ['docker', 'exec', 'gptinfernse-redis', 'redis-cli', 'keys', 'conversation:*']
        keys_result = subprocess.run(keys_cmd, capture_output=True, text=True)
        
        if keys_result.returncode == 0:
            keys = keys_result.stdout.strip().split('\n') if keys_result.stdout.strip() else []
            if keys and keys[0]:
                print(f"  üîë –ö–ª—é—á–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ Redis: {len(keys)}")
                for key in keys[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                    if key.strip():
                        print(f"    - {key}")
            else:
                print("  ‚ö†Ô∏è  –ö–ª—é—á–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ Redis –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_keys_cmd = ['docker', 'exec', 'gptinfernse-redis', 'redis-cli', 'keys', 'user:*']
        user_keys_result = subprocess.run(user_keys_cmd, capture_output=True, text=True)
        
        if user_keys_result.returncode == 0:
            user_keys = user_keys_result.stdout.strip().split('\n') if user_keys_result.stdout.strip() else []
            if user_keys and user_keys[0]:
                print(f"  üë§ –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Redis: {len(user_keys)}")
            else:
                print("  ‚ö†Ô∏è  –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Redis –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    print("üöÄ –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ GPTInfernse")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º API –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ API –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    try:
        restart_cmd = ['docker', 'restart', 'gptinfernse-api']
        restart_result = subprocess.run(restart_cmd, capture_output=True, text=True)
        
        if restart_result.returncode == 0:
            print("‚úÖ API –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            time.sleep(5)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {restart_result.stderr}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
    success = test_chat_memory()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –£–°–ü–ï–®–ï–ù!")
        print("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Ç–µ–ø–µ—Ä—å –ø–æ–º–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏.")
    else:
        print("‚ùå –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –ù–ï –ü–†–û–®–ï–õ")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ API –∏ worker'–∞:")
        print("  docker logs --tail 20 gptinfernse-api")
        print("  docker logs --tail 20 gptinfernse-worker")

if __name__ == "__main__":
    main()
